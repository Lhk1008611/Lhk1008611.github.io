"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2799],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function m(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):m(m({},t),e)),a},s=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=i(a),c=r,d=u["".concat(p,".").concat(c)]||u[c]||y[c]||l;return a?n.createElement(d,m(m({ref:t},s),{},{components:a})):n.createElement(d,m({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,m=new Array(l);m[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,m[1]=o;for(var i=2;i<l;i++)m[i]=a[i];return n.createElement.apply(null,m)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},29256:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:22},m="Stream API",o={unversionedId:"Java/StreamAPI",id:"Java/StreamAPI",title:"Stream API",description:"Stream",source:"@site/docs/Java/StreamAPI.md",sourceDirName:"Java",slug:"/Java/StreamAPI",permalink:"/docs/Java/StreamAPI",draft:!1,tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Lambda \u8868\u8fbe\u5f0f",permalink:"/docs/Java/Lambda"},next:{title:"Optional \u7c7b",permalink:"/docs/Java/Optional"}},p={},i=[{value:"Stream",id:"stream",level:2},{value:"Stream \u7684\u5b9e\u4f8b\u5316",id:"stream-\u7684\u5b9e\u4f8b\u5316",level:3},{value:"Stream \u7684\u4e2d\u95f4\u64cd\u4f5c",id:"stream-\u7684\u4e2d\u95f4\u64cd\u4f5c",level:3},{value:"Stream \u7684\u7ec8\u6b62\u64cd\u4f5c",id:"stream-\u7684\u7ec8\u6b62\u64cd\u4f5c",level:3}],s={toc:i};function u(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"stream-api"},"Stream API"),(0,r.kt)("h2",{id:"stream"},"Stream"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Stream \u5230\u5e95\u662f\u4ec0\u4e48\u5462? "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u662f\u6570\u636e\u6e20\u9053\uff0c\u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u6e90(\u96c6\u5408\u3001\u6570\u7ec4\u7b49)\u6240\u751f\u6210\u7684\u5143\u7d20\u5e8f\u5217\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u96c6\u5408\u8bb2\u7684\u662f\u6570\u636e\uff0cStream \u8bb2\u7684\u662f\u8ba1\u7b97!"),(0,r.kt)("li",{parentName:"ul"},"\u6ce8\u610f:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Stream \u81ea\u5df1\u4e0d\u4f1a\u5b58\u50a8\u5143\u7d20\u3002 "),(0,r.kt)("li",{parentName:"ol"},"Stream \u4e0d\u4f1a\u6539\u53d8\u6e90\u5bf9\u8c61\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6301\u6709\u7ed3\u679c\u7684\u65b0 Stream\u3002 "),(0,r.kt)("li",{parentName:"ol"},"Stream \u64cd\u4f5c\u662f\u5ef6\u8fdf\u6267\u884c\u7684\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4f1a\u7b49\u5230\u9700\u8981\u7ed3\u679c\u7684\u65f6\u5019\u624d\u6267\u884c\u3002",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5ef6\u8fdf\u64cd\u4f5c\uff1a\u53ea\u8981\u6ca1\u6709\u6267\u884c\u7ec8\u6b62\u64cd\u4f5c\uff0c\u4e2d\u95f4\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u6267\u884c\uff1b\u53ea\u6709\u6267\u884c\u4e86\u7ec8\u6b62\u64cd\u4f5c\uff0c\u624d\u4f1a\u6267\u884c\u4e2d\u95f4\u64cd\u4f5c\uff0c\u5e76\u4ea7\u751f\u7ed3\u679c\uff0c\u4e14\u4e4b\u540e\u4e0d\u80fd\u518d\u88ab\u4f7f\u7528\uff1b\u5982\u9700\u8981\u518d\u6b21\u4f7f\u7528\uff0c\u9700\u8981\u91cd\u65b0\u521b\u5efa Stream \u5bf9\u8c61\u3002"))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Stream \u7684\u64cd\u4f5c\u4e09\u4e2a\u6b65\u9aa4 "),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa Stream ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u6570\u636e\u6e90(\u5982:\u96c6\u5408\u3001\u6570\u7ec4)\uff0c\u83b7\u53d6\u4e00\u4e2a\u6d41"))),(0,r.kt)("li",{parentName:"ol"},"\u4e2d\u95f4\u64cd\u4f5c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u4e2d\u95f4\u64cd\u4f5c\u94fe\uff0c\u5bf9\u6570\u636e\u6e90\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406"))),(0,r.kt)("li",{parentName:"ol"},"\u7ec8\u6b62\u64cd\u4f5c(\u7ec8\u7aef\u64cd\u4f5c)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u4e00\u65e6\u6267\u884c\u7ec8\u6b62\u64cd\u4f5c\uff0c\u5c31\u6267\u884c\u4e2d\u95f4\u64cd\u4f5c\u94fe\uff0c\u5e76\u4ea7\u751f\u7ed3\u679c\u3002\u4e4b\u540e\uff0c\u4e0d\u4f1a\u518d\u88ab\u4f7f\u7528")))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"stream_step",src:a(87713).Z,width:"646",height:"117"})))),(0,r.kt)("h3",{id:"stream-\u7684\u5b9e\u4f8b\u5316"},"Stream \u7684\u5b9e\u4f8b\u5316"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'/**\n* 1.Stream \u5173\u6ce8\u7684\u662f\u5bf9\u6570\u636e\u7684\u8fd0\u7b97\uff0c\u4e0e CPU \u6253\u4ea4\u9053\n* \u96c6\u5408\u5173\u6ce8\u7684\u662f\u6570\u636e\u7684\u5b58\u50a8\uff0c\u4e0e\u5185\u5b58\u6253\u4ea4\u9053\n*\n* 2.\n* \u2460Stream \u81ea\u5df1\u4e0d\u4f1a\u5b58\u50a8\u5143\u7d20\u3002\n* \u2461Stream \u4e0d\u4f1a\u6539\u53d8\u6e90\u5bf9\u8c61\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6301\u6709\u7ed3\u679c\u7684\u65b0Stream\u3002\n* \u2462Stream \u64cd\u4f5c\u662f\u5ef6\u8fdf\u6267\u884c\u7684\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4f1a\u7b49\u5230\u9700\u8981\u7ed3\u679c\u7684\u65f6\u5019\u624d\u6267\u884c\n*\n*3.Stream\u6267\u884c\u6d41\u7a0b\n* \u2460Stram\u7684\u5b9e\u4f8b\u5316\n* \u2461\u4e00\u7cfb\u5217\u7684\u4e2d\u95f4\u64cd\u4f5c\uff08\u8fc7\u6ee4\u3001\u6620\u5c04...\uff09\n* \u2462\u7ec8\u6b62\u64cd\u4f5c\n*\n* 4.\u8bf4\u660e\n* \u4e00\u4e2a\u4e2d\u95f4\u64cd\u4f5c\u94fe\uff0c\u5bf9\u6570\u636e\u6e90\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\n* \u4e00\u65e6\u6267\u884c\u7ec8\u6b62\u64cd\u4f5c\uff0c\u5c31\u6267\u884c\u4e2d\u95f4\u64cd\u4f5c\u94fe\uff0c\u5e76\u4ea7\u751f\u7ed3\u679c\u3002\u4e4b\u540e\uff0c\u4e0d\u4f1a\u518d\u88ab\u4f7f\u7528\n*\n* \u6d4b\u8bd5Stream\u7684\u5b9e\u4f8b\u5316\n* @author Lhk\n*/\npublic class StreamAPITest {\n    //\u521b\u5efa Stream\u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7\u96c6\u5408\n    @Test\n    public void test(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // default Stream<E> stream() : \u8fd4\u56de\u4e00\u4e2a\u987a\u5e8f\u6d41\n        Stream<Employee> stream = employees.stream();\n        // default Stream<E> parallelStream() : \u8fd4\u56de\u4e00\u4e2a\u5e76\u884c\u6d41\n        Stream<Employee> employeeStream = employees.parallelStream();\n    }\n\n    //\u521b\u5efa Stream\u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7\u6570\u7ec4\n    @Test\n    public void test1(){\n        int[] arr=new int[]{1,2,3,4,5,6};\n        //\u8c03\u7528Arrays\u7c7b\u7684 static <T> Stream<T> stream(T[] array): \u8fd4\u56de\u4e00\u4e2a\u6d41\n        IntStream stream = Arrays.stream(arr);\n        Employee e1=new Employee(1001,"Lhk");\n        Employee e2=new Employee(1002,"lhk");\n        Employee[] employees=new Employee[]{e1,e2};\n        Stream<Employee> stream1 = Arrays.stream(employees);\n    }\n\n    //\u521b\u5efa Stream\u65b9\u5f0f\u4e09\uff1a\u901a\u8fc7Stream\u7684of()\n    @Test\n    public void test2(){\n        Stream<Integer> integerStream = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    }\n\n    //\u521b\u5efa Stream \u65b9\u5f0f\u56db\uff1a\u521b\u5efa\u65e0\u9650\u6d41\n    @Test\n    public void test3(){\n        // \u8fed\u4ee3\n        // public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)\n        //\u904d\u5386\u524d\u5341\u4e2a\u5076\u6570\n        Stream.iterate(0,t->t+2).limit(10).forEach(System.out::println);\n        // \u751f\u6210\n        // public static<T> Stream<T> generate(Supplier<T> s)\n        //\u904d\u5386\u5341\u4e2a[0,1)\u7684\u968f\u673a\u6570\n        Stream.generate(Math::random).limit(10).forEach(System.out::println);\n    }\n\n}\n')),(0,r.kt)("h3",{id:"stream-\u7684\u4e2d\u95f4\u64cd\u4f5c"},"Stream \u7684\u4e2d\u95f4\u64cd\u4f5c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u591a\u4e2a\u4e2d\u95f4\u64cd\u4f5c\u53ef\u4ee5\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u4e00\u4e2a\u6d41\u6c34\u7ebf\uff0c\u9664\u975e\u6d41\u6c34\u7ebf\u4e0a\u89e6\u53d1\u7ec8\u6b62\u64cd\u4f5c\uff0c\u5426\u5219\u4e2d\u95f4\u64cd\u4f5c\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u7684\u5904\u7406!\u800c\u4f1a\u5728\u7ec8\u6b62\u64cd\u4f5c\u65f6\u4e00\u6b21\u6027\u5168\u90e8\u5904\u7406\uff0c\u79f0\u4e3a\u201c\u60f0\u6027\u6c42\u503c\u201d")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u7b5b\u9009\u4e0e\u5207\u7247"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9 \u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf \u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filter(Predicate p)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536 Lambda\uff0c \u4ece\u6d41\u4e2d\u6392\u9664\u67d0\u4e9b\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"distinct()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7b5b\u9009\uff0c\u901a\u8fc7\u6d41\u6240\u751f\u6210\u5143\u7d20\u7684 ",(0,r.kt)("inlineCode",{parentName:"td"},"hashCode()")," \u548c ",(0,r.kt)("inlineCode",{parentName:"td"},"equals()")," \u53bb\u9664\u91cd\u590d\u5143\u7d22")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"limit(long maxSize)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u622a\u65ad\u6d41\uff0c\u4f7f\u5176\u5143\u7d20\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u6570\u91cf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skip(long n)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8df3\u8fc7\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u4e2a\u6254\u6389\u4e86\u524d n \u4e2a\u5143\u7d20\u7684\u6d41\u3002",(0,r.kt)("br",null),"\u82e5\u6d41\u4e2d\u5143\u7d20\u4e0d\u8db3 n \u4e2a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6d41\u3002\u4e0e ",(0,r.kt)("inlineCode",{parentName:"td"},"limit(n)")," \u4e92\u8865"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u6620\u5c04"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9 \u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf \u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"map(Function f)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u5e94\u7528\u5230\u6bcf\u4e2a\u5143\u7d20\u4e0a\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u6210\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mapToDouble(ToDoubleFunction f)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u5e94\u7528\u5230\u6bcf\u4e2a\u5143\u7d20\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 DoubleStream\u3002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mapTolnt(TolntFunction f)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u5e94\u7528\u5230\u6bcf\u4e2a\u5143\u7d20\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 IntStream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mapToLong(ToLongFunction f)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u5e94\u7528\u5230\u6bcf\u4e2a\u5143\u7d20\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 LongStream\u3002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"flatMap(Function f)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u6d41\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6362\u6210\u53e6\u4e00\u4e2a\u6d41\uff0c\u7136\u540e\u628a\u6240\u6709\u6d41\u8fde\u63a5\u6210\u4e00\u4e2a\u6d41")))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u4f8b"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'/**\n* \u6d4b\u8bd5Stream\u7684\u4e2d\u95f4\u64cd\u4f5c\n* @author Lhk\n*/\npublic class StreamAPITest1 {\n    //1.\u7b5b\u9009\u4e0e\u5207\u7247\n    @Test\n    public void test(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // filter(Predicate p) \u63a5\u6536 Lambda \uff0c\u4ece\u6d41\u4e2d\u6392\u9664\u67d0\u4e9b\u5143\u7d20\n        //\u67e5\u8be2\u5458\u5de5\u8868\u4e2d\u85aa\u8d44\u5927\u4e8e5000\u7684\u5458\u5de5\u4fe1\u606f\n        Stream<Employee> stream = employees.stream();\n        stream.filter(e->e.getSalary()>5000).forEach(System.out::println);\n        System.out.println();\n        // limit(long maxSize) \u622a\u65ad\u6d41\uff0c\u4f7f\u5176\u5143\u7d20\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u6570\u91cf\n        employees.stream().limit(3).forEach(System.out::println);\n        System.out.println();\n        // skip(long n) \u8df3\u8fc7\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u4e2a\u6254\u6389\u4e86\u524d n \u4e2a\u5143\u7d20\u7684\u6d41\u3002\u82e5\u6d41\u4e2d\u5143\u7d20\u4e0d\u8db3 n \u4e2a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6d41\u3002\u4e0e limit(n) \u4e92\u8865\n        employees.stream().skip(3).forEach(System.out::println);\n        System.out.println();\n        // distinct() \u7b5b\u9009\uff0c\u901a\u8fc7\u6d41\u6240\u751f\u6210\u5143\u7d20\u7684 hashCode() \u548c equals() \u53bb\u9664\u91cd\u590d\u5143\u7d20\n        employees.add(new Employee(1009,"\u96f7\u519b",55,8000));\n        employees.add(new Employee(1009,"\u96f7\u519b",55,8000));\n        employees.add(new Employee(1009,"\u96f7\u519b",55,8000));\n        employees.stream().distinct().forEach(System.out::println);\n    }\n\n    //\u6620\u5c04\n    @Test\n    public void test1(){\n        // map(Function f) \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u88ab\u5e94\u7528\u5230\u6bcf\u4e2a\u5143 \u7d20\u4e0a\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u6210\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002\n        List<String> list = Arrays.asList("aa", "bb", "cc", "dd");\n        list.stream().map(s -> s.toUpperCase()).forEach(System.out::println);\n        //\u7ec3\u4e60\uff1a\u83b7\u53d6\u5458\u5de5\u59d3\u540d\u957f\u5ea6\u5927\u4e8e3\u7684\u5458\u5de5\u59d3\u540d\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<String> nameStream = employees.stream().map(Employee::getName);\n        nameStream.filter(name->name.length()>3).forEach(System.out::println);\n        System.out.println();\n        //map\u4e0eflatMap\u7684\u533a\u522b\n        Stream<Stream<Character>> streamStream = list.stream().map(StreamAPITest1::fromStringToStream);\n        streamStream.forEach(s->s.forEach(System.out::println));\n        System.out.println();\n        // flatMap(Function f) \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u6d41\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6362\u6210\u53e6\u4e00\u4e2a\u6d41(\u63d0\u53d6\u6bcf\u4e00\u4e2a\u503c\u4f5c\u4e3a\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u6d41)\uff0c\u7136\u540e\u628a\u6240\u6709\u6d41\u8fde\u63a5\u6210\u4e00\u4e2a\u6d41\n        Stream<Character> characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);\n        characterStream.forEach(System.out::println);\n    }\n    \n    //\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u591a\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u96c6\u5408\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684Stream\u7684\u5b9e\u4f8b\n    public static Stream<Character> fromStringToStream(String str){\n        ArrayList<Character> list=new ArrayList<>();\n        for (Character c:str.toCharArray()){\n            list.add(c);\n        }\n        return list.stream();\n    }\n\n    //\u6392\u5e8f\n    @Test\n    public void test2(){\n        // sorted() \u4ea7\u751f\u4e00\u4e2a\u65b0\u6d41\uff0c\u5176\u4e2d\u6309\u81ea\u7136\u987a\u5e8f\u6392\u5e8f\n        List<Integer> list = Arrays.asList(15, 22, 13, 65, 55, 43, 21, 51);\n        list.stream().sorted().forEach(System.out::println);\n        //\u629b\u5f02\u5e38\uff0c\u539f\u56e0\uff1aEmployee\u6ca1\u6709\u5b9e\u73b0Comparable\u63a5\u53e3\n        // List<Employee> employees = EmployeeData.getEmployees();\n        // employees.stream().sorted().forEach(System.out::println);\n        // sorted(Comparator com) \u4ea7\u751f\u4e00\u4e2a\u65b0\u6d41\uff0c\u5176\u4e2d\u6309\u6bd4\u8f83\u5668\u987a\u5e8f\u6392\u5e8f\uff08\u5b9a\u5236\u6392\u5e8f\uff09\n        List<Employee> employees = EmployeeData.getEmployees();\n        employees.stream().sorted((e1,e2)-> {\n            int ageValue = Integer.compare(e1.getAge(), e2.getAge());\n            if (ageValue!=0){\n                return ageValue;\n            }else{\n                return Double.compare(e1.getSalary(), e2.getSalary());\n            }\n        }).forEach(System.out::println);\n    }\n}\n')))),(0,r.kt)("h3",{id:"stream-\u7684\u7ec8\u6b62\u64cd\u4f5c"},"Stream \u7684\u7ec8\u6b62\u64cd\u4f5c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u76f8\u5173\u65b9\u6cd5"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9 \u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf \u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6d41\u4e2d\u5143\u7d20\u603b\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max(Comparator c)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6d41\u4e2d\u6700\u5927\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min(Comparator c)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6d41\u4e2d\u6700\u5c0f\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"forEach(Consumer c)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5185\u90e8\u8fed\u4ee3 (\u4f7f\u7528 Collection \u63a5\u53e3\u9700\u8981\u7528\u6237\u53bb\u505a\u8fed\u4ee3,\u79f0\u4e3a\u5916\u90e8\u8fed\u4ee3\u3002",(0,r.kt)("br",null),"\u76f8\u53cd\uff0cStreamAPI\u4f7f\u7528\u5185\u90e8\u8fed\u4ee3--\u5b83\u5e2e\u4f60\u628a\u8fed\u4ee3\u505a\u4e86)"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f52\u7ea6"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9 \u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf \u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reduce(T iden, BinaryOperator b)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53ef\u4ee5\u5c06\u6d41\u4e2d\u5143\u7d20\u53cd\u590d\u7ed3\u5408\u8d77\u6765\uff0c\u5f97\u5230\u4e00\u4e2a\u503c\u3002\u8fd4\u56de T")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reduce(BinaryOperator b)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53ef\u4ee5\u5c06\u6d41\u4e2d\u5143\u7d20\u53cd\u590d\u7ed3\u5408\u8d77\u6765\uff0c\u5f97\u5230\u4e00\u4e2a\u503c\u3002\u8fd4\u56de ",(0,r.kt)("inlineCode",{parentName:"td"},"Optional<T>"))))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"map \u548c reduce \u7684\u8fde\u63a5\u901a\u5e38\u79f0\u4e3a map-reduce \u6a21\u5f0f\uff0c\u56e0 Google \u7528\u5b83\u6765\u8fdb\u884c\u7f51\u7edc\u641c\u7d22\u800c\u51fa\u540d"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u6536\u96c6"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9 \u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u63cf \u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collect(Collector c)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u6d41\u8f6c\u6362\u4e3a\u5176\u4ed6\u5f62\u5f0f\u3002\u63a5\u6536\u4e00\u4e2a Collector\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u7528\u4e8e\u7ed9Stream\u4e2d\u5143\u7d20\u505a\u6c47\u603b\u7684\u65b9\u6cd5")))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Collector \u63a5\u53e3\u4e2d\u65b9\u6cd5\u7684\u5b9e\u73b0\u51b3\u5b9a\u4e86\u5982\u4f55\u5bf9\u6d41\u6267\u884c\u6536\u96c6\u7684\u64cd\u4f5c(\u5982\u6536\u96c6\u5230 List\u3001Set\u3001Map)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u53e6\u5916\uff0c Collectors \u5b9e\u7528\u7c7b\u63d0\u4f9b\u4e86\u5f88\u591a\u9759\u6001\u65b9\u6cd5\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u521b\u5efa\u5e38\u89c1\u6536\u96c6\u5668\u5b9e\u4f8b,\u5177\u4f53\u65b9\u6cd5\u4e0e\u5b9e\u4f8b\u5982\u4e0b\u8868:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"Collectors",src:a(63556).Z,width:"735",height:"407"}))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u4f8b"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'/**\n* \u6d4b\u8bd5 Stream \u7684\u7ec8\u6b62\u64cd\u4f5c\n* @author Lhk\n*/\npublic class StreamAPITest2 {\n\n    //\u5339\u914d\u4e0e\u67e5\u627e\n    @Test\n    public void test1(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // allMatch(Predicate p) \u68c0\u67e5\u662f\u5426\u5339\u914d\u6240\u6709\u5143\u7d20\n        //\u7ec3\u4e60\uff1a\u662f\u5426\u6240\u6709\u7684\u5458\u5de5\u7684\u5e74\u9f84\u90fd\u5927\u4e8e18\u5c81\n        boolean allMatch = employees.stream().allMatch(e -> e.getAge() > 18);\n        System.out.println(allMatch);\n        // anyMatch(Predicate p) \u68c0\u67e5\u662f\u5426\u81f3\u5c11\u5339\u914d\u4e00\u4e2a\u5143\u7d20\n        //\u7ec3\u4e60\uff1a\u662f\u5426\u5b58\u5728\u5458\u5de5\u7684\u5de5\u8d44\u5927\u4e8e10000\n        boolean anyMatch = employees.stream().anyMatch(e -> e.getSalary() > 10000);\n        System.out.println(anyMatch);\n        // noneMatch(Predicate p) \u68c0\u67e5\u662f\u5426\u6ca1\u6709\u5339\u914d\u6240\u6709\u5143\u7d20\n        //\u7ec3\u4e60\uff1a\u662f\u5426\u5b58\u5728\u5458\u5de5\u59d3\u201c\u96f7\u201d\n        boolean noneMatch = employees.stream().noneMatch(e -> e.getName().startsWith("\u96f7"));\n        System.out.println(noneMatch);\n        // findFirst() \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\n        Optional<Employee> first = employees.stream().findFirst();\n        System.out.println(first);\n        // findAny() \u8fd4\u56de\u5f53\u524d\u6d41\u4e2d\u7684\u4efb\u610f\u5143\u7d20\n        Optional<Employee> any = employees.parallelStream().findAny();\n        System.out.println(any);\n    }\n\n    @Test\n    public void test2(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // count() \u8fd4\u56de\u6d41\u4e2d\u5143\u7d20\u603b\u6570\n        long count = employees.stream().filter(e->e.getSalary()>5000).count();\n        System.out.println(count);\n        // max(Comparator c) \u8fd4\u56de\u6d41\u4e2d\u6700\u5927\u503c\n        //\u7ec3\u4e60\uff1a\u8fd4\u56de\u6700\u9ad8\u7684\u5de5\u8d44\n        Stream<Double> salaryStream = employees.stream().map(e -> e.getSalary());\n        Optional<Double> max = salaryStream.max((Double::compare));\n        System.out.println(max);\n        // min(Comparator c) \u8fd4\u56de\u6d41\u4e2d\u6700\u5c0f\u503c\n        //\u7ec3\u4e60\u8fd4\u56de\u5de5\u8d44\u6700\u4f4e\u7684\u5458\u5de5\n        Optional<Employee> employee = employees.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary()));\n        System.out.println(employee);\n        // forEach(Consumer c) \u5185\u90e8\u8fed\u4ee3(\u4f7f\u7528Collection\u63a5\u53e3\u9700\u8981\u7528\u6237\u53bb\u505a\u8fed\u4ee3\uff0c\u79f0\u4e3a\u5916\u90e8\u8fed\u4ee3\u3002\u76f8\u53cd\uff0cStream API \u4f7f\u7528\u5185\u90e8\u8fed\u4ee3\u2014\u2014\u5b83\u5e2e\u4f60\u628a\u8fed\u4ee3\u505a\u4e86)\n        employees.stream().forEach(System.out::println);\n    }\n\n    //\u89c4\u7ea6\n    @Test\n    public void test3(){\n        // reduce(T identity, BinaryOperator b) \u53ef\u4ee5\u5c06\u6d41\u4e2d\u5143\u7d20\u53cd\u590d\u7ed3\u5408\u8d77\u6765\uff0c\u5f97\u5230\u4e00 \u4e2a\u503c\u3002\u8fd4\u56de T\n        //\u7ec3\u4e60\uff1a\u8ba1\u7b971-10\u7684\u81ea\u7136\u6570\u7684\u548c\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        Integer reduce = list.stream().reduce(0, Integer::sum);\n        System.out.println(reduce);\n        // reduce(BinaryOperator b) \u53ef\u4ee5\u5c06\u6d41\u4e2d\u5143\u7d20\u53cd\u590d\u7ed3\u5408\u8d77\u6765\uff0c\u5f97\u5230\u4e00 \u4e2a\u503c\u3002\u8fd4\u56de Optional<T>\n        //\u7ec3\u4e60\uff1a\u8ba1\u7b97\u6240\u6709\u5458\u5de5\u7684\u5de5\u8d44\u603b\u548c\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<Double> salaryStream = employees.stream().map(e -> e.getSalary());\n        // Optional<Double> SUM = salaryStream.reduce(Double::sum);\n        Optional<Double> SUM = salaryStream.reduce((d1, d2) -> d1 + d2);\n        System.out.println(SUM);\n    }\n\n    //\u6536\u96c6\n    @Test\n    public void test4(){\n        // collect(Collector c) \u5c06\u6d41\u8f6c\u6362\u4e3a\u5176\u4ed6\u5f62\u5f0f\u3002\u63a5\u6536\u4e00\u4e2aCollector\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u7528\u4e8e\u7ed9Stream\u4e2d\u5143\u7d20\u505a\u6c47\u603b\u7684\u65b9\u6cd5\n        //\u7ec3\u4e60\uff1a\u67e5\u627e\u5de5\u8d44\u5927\u4e8e6000\u7684\u5458\u5de5\uff0c\u7ed3\u679c\u8fd4\u56de\u4e3a\u4e00\u4e2aList\u6216Set\n        List<Employee> employees = EmployeeData.getEmployees();\n        List<Employee> employeeList = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toList());\n        employeeList.forEach(System.out::println);\n        System.out.println();\n        Set<Employee> employeeSet = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toSet());\n        employeeSet.forEach(System.out::println);\n    }\n}\n')))))}u.isMDXComponent=!0},63556:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Collectors-49a998139f61408e40f4e21d42559b0f.png"},87713:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/stream_step-a2438170a814cfdec6a23a5d8bb873f8.png"}}]);