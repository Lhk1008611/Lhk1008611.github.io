"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4927],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>S});var o=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=o.createContext({}),l=function(n){var e=o.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=l(n.components);return o.createElement(s.Provider,{value:e},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),u=l(t),d=r,S=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return t?o.createElement(S,c(c({ref:e},p),{},{components:t})):o.createElement(S,c({ref:e},p))}));function S(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i[u]="string"==typeof n?n:r,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6421:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:19},c="JDBC \u6838\u5fc3\u6280\u672f",i={unversionedId:"Java/JDBC",id:"Java/JDBC",title:"JDBC \u6838\u5fc3\u6280\u672f",description:"\u4e00\u3001\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5",source:"@site/docs/Java/JDBC.md",sourceDirName:"Java",slug:"/Java/JDBC",permalink:"/docs/Java/JDBC",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19},sidebar:"tutorialSidebar",previous:{title:"Java \u7f51\u7edc\u7f16\u7a0b",permalink:"/docs/Java/NetworkProgramming"},next:{title:"Java Reflection",permalink:"/docs/Java/Reflection"}},s={},l=[{value:"\u4e00\u3001\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5",id:"\u4e00\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5",level:2},{value:"\u4e8c\u3001\u4f7f\u7528 PreparedStatement \u5b9e\u73b0 CRUD \u64cd\u4f5c",id:"\u4e8c\u4f7f\u7528-preparedstatement-\u5b9e\u73b0-crud-\u64cd\u4f5c",level:2},{value:"\u64cd\u4f5c Blob \u7c7b\u578b\u6570\u636e",id:"\u64cd\u4f5c-blob-\u7c7b\u578b\u6570\u636e",level:3},{value:"\u4e09\u3001\u6279\u91cf\u63d2\u5165",id:"\u4e09\u6279\u91cf\u63d2\u5165",level:2},{value:"\u56db\u3001\u6570\u636e\u5e93\u4e8b\u52a1",id:"\u56db\u6570\u636e\u5e93\u4e8b\u52a1",level:2},{value:"\u4e94\u3001DAO \u53ca\u5176\u76f8\u5173\u5b9e\u73b0\u7c7b",id:"\u4e94dao-\u53ca\u5176\u76f8\u5173\u5b9e\u73b0\u7c7b",level:2},{value:"BaseDao",id:"basedao",level:3},{value:"\u5b9e\u4f53\u7c7b",id:"\u5b9e\u4f53\u7c7b",level:3},{value:"\u5de5\u5177\u7c7b",id:"\u5de5\u5177\u7c7b",level:3},{value:"\u9488\u5bf9\u4e8e\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u5e38\u7528\u64cd\u4f5c\u7684 DAO \u63a5\u53e3",id:"\u9488\u5bf9\u4e8e\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u5e38\u7528\u64cd\u4f5c\u7684-dao-\u63a5\u53e3",level:3},{value:"DAO \u63a5\u53e3\u5b9e\u73b0\u7c7b",id:"dao-\u63a5\u53e3\u5b9e\u73b0\u7c7b",level:3},{value:"\u6d4b\u8bd5",id:"\u6d4b\u8bd5",level:3},{value:"\u516d\u3001\u6570\u636e\u5e93\u8fde\u63a5\u6c60",id:"\u516d\u6570\u636e\u5e93\u8fde\u63a5\u6c60",level:2},{value:"C3P0 \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",id:"c3p0-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",level:3},{value:"DBCP \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",id:"dbcp-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",level:3},{value:"Druid \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",id:"druid-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f",level:3},{value:"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5de5\u5177\u7c7b",id:"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5de5\u5177\u7c7b",level:3},{value:"\u4e03\u3001Apache-DBUtils \u5b9e\u73b0 CRUD \u64cd\u4f5c",id:"\u4e03apache-dbutils-\u5b9e\u73b0-crud-\u64cd\u4f5c",level:2},{value:"\u5de5\u5177\u7c7b",id:"\u5de5\u5177\u7c7b-1",level:3},{value:"\u6d4b\u8bd5",id:"\u6d4b\u8bd5-1",level:3}],p={toc:l};function u(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jdbc-\u6838\u5fc3\u6280\u672f"},"JDBC \u6838\u5fc3\u6280\u672f"),(0,r.kt)("h2",{id:"\u4e00\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5"},"\u4e00\u3001\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.junit.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\n/**\n * @author Lhk\n */\npublic class JDBC_connection {\n    //\u8fde\u63a5\u65b9\u5f0f1\n    @Test\n    public void connectiontest1() throws SQLException {\n        //1.\u63d0\u4f9bjava.sql.Driver\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5bf9\u8c61\n        Driver driver = new com.mysql.jdbc.Driver();\n        \n        //2.\u63d0\u4f9burl\uff0c\u6307\u660e\u5177\u4f53\u64cd\u4f5c\u7684\u6570\u636e\u5e93\n        //  url:http://localhost:8080/gmall/keyboard.jpg\n        //  jdbc:mysql  :  \u534f\u8bae:\u5b50\u534f\u8bae\n        //  localhost : ip\u5730\u5740\n        //  3306 : \u9ed8\u8ba4mysql\u7684\u7aef\u53e3\u53f7\n        //  test : test\u6570\u636e\u5e93\n        String url = "jdbc:mysql://localhost:3306/test";\n\n        //3.\u63d0\u4f9bProperties\u7684\u5bf9\u8c61\uff0c\u6307\u660e\u7528\u6237\u540d\u548c\u5bc6\u7801\n        Properties info = new Properties();\n        info.setProperty("user", "root");\n        info.setProperty("password","123456");\n\n        //4.\u8c03\u7528driver\u7684connect()\uff0c\u83b7\u53d6\u8fde\u63a5\n        Connection connection = driver.connect(url,info);\n        System.out.println(connection);\n    }\n\n    //\u8fde\u63a5\u65b9\u5f0f2\uff1a\u4f7f\u7528\u53cd\u5c04\u83b7\u53d6Driver\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7b2c\u4e09\u65b9\u7684api\uff0c\u6709\u66f4\u597d\u7684\u79fb\u690d\u6027\n    @Test\n    public void connectionTest2() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {\n        //1.\u4f7f\u7528java\u53cd\u5c04\u673a\u5236\u6765\u63d0\u4f9bjava.sql.Driver\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5bf9\u8c61\n        Class clazz = Class.forName("com.mysql.jdbc.Driver");\n        Driver driver = (Driver) clazz.newInstance();\n\n        //2.\u63d0\u4f9burl\uff0c\u6307\u660e\u5177\u4f53\u64cd\u4f5c\u7684\u6570\u636e\u5e93\n        String url = "jdbc:mysql://localhost:3306/test";\n\n        //3.\u63d0\u4f9bProperties\u7684\u5bf9\u8c61\uff0c\u6307\u660e\u7528\u6237\u540d\u548c\u5bc6\u7801\n        Properties info = new Properties();\n        info.setProperty("user","root");\n        info.setProperty("password","123456");\n\n        //4.\u8c03\u7528driver\u7684connect()\uff0c\u83b7\u53d6\u8fde\u63a5\n        Connection connect = driver.connect(url, info);\n        System.out.println(connect);\n    }\n\n    //\u8fde\u63a5\u65b9\u5f0f3\uff1a\u4f7f\u7528DriverManager\u4ee3\u66ffDriver\uff08\u5e38\u7528\u65b9\u5f0f\uff09\n    @Test\n    public void connectionTest3() throws Exception {\n        //1.\u4f7f\u7528java\u53cd\u5c04\u673a\u5236\u6765\u63d0\u4f9bjava.sql.Driver\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5bf9\u8c61\n        Class clazz = Class.forName("com.mysql.jdbc.Driver");\n        Driver driver = (Driver) clazz.newInstance();\n\n        //2.\u83b7\u53d6\u8fde\u63a5\u4fe1\u606f\uff1aurl user pasaword\n        String url="jdbc:mysql://localhost:3306/test";\n        String user="root";\n        String password="123456";\n\n        //3.\u6ce8\u518c\u9a71\u52a8\n        DriverManager.registerDriver(driver);\n        //4.\u83b7\u53d6\u8fde\u63a5\n        Connection conn = DriverManager.getConnection(url, user, password);\n        System.out.println(conn);\n    }\n\n    //\u8fde\u63a5\u65b9\u5f0f4\uff1a\u53ea\u52a0\u8f7d\u9a71\u52a8\uff0c\u4e0d\u7528\u663e\u793a\u7684\u6ce8\u518c\u9a71\u52a8\n    @Test\n    public void connectionTest4() throws Exception{\n        //1.\u83b7\u53d6\u8fde\u63a5\u4fe1\u606f\uff1aurl  user  password\n        String url="jdbc:mysql://localhost:3306/test";\n        String user="root";\n        String password="123456";\n\n        //2.\u52a0\u8f7d Driver \u7c7b\uff0c\u4f1a\u6267\u884c\u7c7b\u4e2d\u7684\u9759\u6001\u4ee3\u7801\u5757\uff0c\u5373\u6ce8\u518c\u9a71\u52a8\n        /*\n        * \u5728 com.mysql.jdbc.Driver \u5b9e\u73b0\u7c7b\u4e2d\uff0c\u58f0\u660e\u4e86\u5982\u4e0b\u64cd\u4f5c\n        * static {\n        *   try {\n        *     DriverManager.registerDriver(new Driver());\n        *   } catch (SQLException var1) {\n        *     throw new RuntimeException("Can\'t register driver!");\n        *   }\n        * }\n        */\n        //\u5728mysql\u4e2d\u8be5\u53e5\u53ef\u7701\u7565\uff0c\u56e0\u4e3a\u5f15\u5165\u7684\u5305\u5305\u542b\u4e86\u8be5\u64cd\u4f5c\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u7701\u7565\uff0c\u539f\u56e0\u662f\u8fde\u63a5\u5176\u4ed6\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u7701\u7565\n        Class.forName("com.mysql.jdbc.Driver");\n\n        //3.\u83b7\u53d6\u8fde\u63a5\n        Connection conn = DriverManager.getConnection(url, user, password);\n        System.out.println(conn);\n    }\n\n    //\u8fde\u63a5\u65b9\u5f0f5(\u6700\u7ec8\u7248)\uff1a\u5c06\u6570\u636e\u5e93\u8fde\u63a5\u9700\u8981\u76844\u4e2a\u57fa\u672c\u4fe1\u606f\u58f0\u660e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u65b9\u5f0f\u83b7\u53d6\u8fde\u63a5\n    /*\n     * \u8be5\u65b9\u5f0f\u7684\u597d\u5904\uff1a\n     * 1.\u5b9e\u73b0\u4e86\u6570\u636e\u4e0e\u4ee3\u7801\u7684\u5206\u79bb\uff0c\u5b9e\u73b0\u4e86\u89e3\u8026\n     * 2.\u5982\u679c\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\uff0c\u53ef\u4ee5\u907f\u514d\u7a0b\u5e8f\u91cd\u65b0\u6253\u5305\n     */\n    @Test\n    public void ConnectionTest5() throws IOException, ClassNotFoundException, SQLException {\n        //1.\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u76844\u4e2a\u57fa\u672c\u4fe1\u606f\n        InputStream resource = JDBC_connection.class.getClassLoader().getResourceAsStream("jdbc.properties");\n        Properties pros=new Properties();\n        pros.load(resource);\n\n        String url = pros.getProperty("url");\n        String user = pros.getProperty("user");\n        String password = pros.getProperty("password");\n        String driverClass = pros.getProperty("driverClass");\n\n        //2.\u52a0\u8f7d Driver \u7c7b\n        Class.forName(driverClass);\n\n        //3.\u83b7\u53d6\u8fde\u63a5\n        Connection connection = DriverManager.getConnection(url, user, password);\n        System.out.println(connection);\n    }\n}\n')),(0,r.kt)("h2",{id:"\u4e8c\u4f7f\u7528-preparedstatement-\u5b9e\u73b0-crud-\u64cd\u4f5c"},"\u4e8c\u3001\u4f7f\u7528 PreparedStatement \u5b9e\u73b0 CRUD \u64cd\u4f5c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.JDBC.lhk.Connection.JDBC_connection;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**\n * \u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u548c\u5173\u95ed\u8d44\u6e90\n * @author Lhk\n */\npublic class jdbcUtils {\n    /**\n     * \u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n     * @return Connection\n     * @throws Exception\n     */\n    public static Connection getConnection() throws Exception {\n        //1.\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u76844\u4e2a\u57fa\u672c\u4fe1\u606f\n        InputStream resource = ClassLoader.getSystemClassLoader().getResourceAsStream("jdbc.properties");\n        Properties pros=new Properties();\n        pros.load(resource);\n        String url = pros.getProperty("url");\n        String user = pros.getProperty("user");\n        String password = pros.getProperty("password");\n        String driverClass = pros.getProperty("driverClass");\n\n        //2.\u52a0\u8f7dDriver\u7c7b\n        Class.forName(driverClass);\n\n        //3.\u83b7\u53d6\u8fde\u63a5\n        Connection connection = DriverManager.getConnection(url, user, password);\n        return connection;\n    }\n\n    /**\n     * \u5173\u95edConnection\u548cPreparedStatement\n     * @param connection\n     * @param ps\n     */\n    public static void closeResource(Connection connection, Statement ps){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    public static void closeResource(Connection connection, Statement ps, ResultSet rs){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (rs!=null)\n                rs.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    //\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5\n    public static int update(String sql, Object ...args)  {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        try {\n            //1.\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n            //2.\u9884\u7f16\u8bd1sql\u8bed\u53e5\n            ps = coon.prepareStatement(sql);\n            //3.\u586b\u5145\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //4.\u6267\u884c\n            /**\n             * ps.execute():\n             * \u5982\u679c\u6267\u884c\u7684\u662f\u67e5\u8be2\u64cd\u4f5c,\u6709\u8fd4\u56de\u7ed3\u679c\uff0c\u5219\u6b64\u65b9\u6cd5\u8fd4\u56detrue;\n             * \u5982\u679c\u6267\u884c\u7684\u662f\u589e\u3001\u5220\u3001\u6539\u64cd\u4f5c\uff0c\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c\uff0c\u5219\u6b64\u65b9\u6cd5\u8fd4\u56defalse.\n             */\n            //ps.execute();\n            return ps.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //5.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps);\n        }\n        return 0;\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.JDBC.lhk.JDBCutil.jdbcUtils;\nimport org.junit.Test;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Properties;\n\n/**\n * \u4f7f\u7528PrepareStatement\u4ee3\u66ffStatement\uff0c\u5b9e\u73b0\u5bf9\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u64cd\u4f5c\n * prepareStatement\u53ef\u4ee5\u89e3\u51b3\u62fc\u4e32\u548csql\u6ce8\u5165\u95ee\u9898\n * prepareStatement\u8fd8\u53ef\u4ee5\u64cd\u4f5cBlob\u6570\u636e\n * \u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u6279\u91cf\u64cd\u4f5c\n * @author Lhk\n *\n */\npublic class PrepareStatementUpdateTest {\n\n    /**\n     * \u5411account\u8868\u63d2\u5165\u6570\u636e\n     */\n    @Test\n    public void insertTest() {\n        Connection connection = null;\n        PreparedStatement ps = null;\n        try {\n            //1.\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u76844\u4e2a\u57fa\u672c\u4fe1\u606f\n            InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("jdbc.properties");\n            Properties pos = new Properties();\n            pos.load(is);\n            String url = pos.getProperty("url");\n            String user = pos.getProperty("user");\n            String password = pos.getProperty("password");\n            String driverClass = pos.getProperty("driverClass");\n\n            //2.\u52a0\u8f7dDriver\u7c7b\n            Class<?> aClass = Class.forName(driverClass);\n\n            //3.\u83b7\u53d6\u8fde\u63a5\n           connection = DriverManager.getConnection(url, user, password);\n\n            //4.\u9884\u7f16\u8bd1sql\u8bed\u53e5\uff0c\u8fd4\u56dePrepareStatement\u5b9e\u4f8b\n            String sql="insert into account(username,balance,birth) values(?,?,?)";//?:\u5360\u4f4d\u7b26\n            ps = connection.prepareStatement(sql);\n\n            //5.\u586b\u5145\u5360\u4f4d\u7b26\n            ps.setString(1,"lhk");\n            ps.setDouble(2,15800);\n            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yy-MM-dd");\n            java.util.Date date = simpleDateFormat.parse("2000-04-22");\n            ps.setDate(3,new Date(date.getTime()));\n\n            //6.\u6267\u884csql\n            ps.execute();//execute:\u6267\u884c\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n        //7.\u8d44\u6e90\u5173\u95ed\n            try {\n                if (ps!=null)\n                ps.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            try {\n                if (connection!=null)\n                connection.close();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        }\n    }\n\n    //\u4fee\u6539account\u8868\u7684\u4e00\u6761\u8bb0\u5f55\n    @Test\n    public void modifyTest() {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        try {\n            //1.\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n\n            //2.\u9884\u7f16\u8bd1sql\u8bed\u53e5\uff0c\u8fd4\u56dePrepareStatement\u5b9e\u4f8b\n            String sql="update account set username=?,balance=? where id=3";\n            ps = coon.prepareStatement(sql);\n\n            //3.\u586b\u5145\u5360\u4f4d\u7b26\n            ps.setString(1,"LHK");\n            ps.setDouble(2,16800);\n\n            //4.\u6267\u884c\n            ps.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            //5.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps);\n        }\n    }\n\n    //\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5\n    public void update(String sql, Object ...args)  {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        try {\n            //1.\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n\n            //2.\u9884\u7f16\u8bd1sql\u8bed\u53e5\n            ps = coon.prepareStatement(sql);\n\n            //3.\u586b\u5145\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n\n            //4.\u6267\u884c\n            ps.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //5.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps);\n        }\n    }\n\n    //\u6d4b\u8bd5\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5\n    @Test\n    public void testCommonUpdate(){\n        //\u5220\u9664\n        //String sql="delete from account where id = ?";\n        //update(sql,3);\n\n        //\u4fee\u6539\n        //String sql="update stuinfo set sex=? where id=?";\n        //update(sql,"f",1);\n\n        //\u589e\u52a0\n        String sql="insert into stuinfo(id,name,sex) values(?,?,?)";\n        update(sql,2,"Themutents","m");\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.JDBC.lhk.JDBCutil.jdbcUtils;\nimport com.JDBC.lhk.bean.Dept2;\nimport org.junit.Test;\nimport java.lang.reflect.Field;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\n\n/**\n * \u9488\u5bf9dept2\u8868\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\n * @author Lhk\n */\npublic class dept2ForQuery {\n\n    @Test\n    public void test(){\n        String sql="select department_id departmentId,department_name departmentName,manager_id managerId,location_id locationId from dept2 where department_id=?";\n        Dept2 dept2 = dept2ForQuery(sql, 20);\n        System.out.println(dept2);\n\n        sql="select department_id departmentId,department_name departmentName from dept2 where department_id=?";\n        Dept2 dept2_1 = dept2ForQuery(sql, 60);\n        System.out.println(dept2_1);\n    }\n    \n    /**\n     * \u9488\u5bf9dept2\u8868\u7684\u901a\u7528\u7684\u67e5\u8be2\u65b9\u6cd5\n     *\n     * \u9488\u5bf9\u4e8e\u8868\u7684\u5b57\u6bb5\u540d\u4e0e\u7c7b\u7684\u5c5e\u6027\u540d\u4e0d\u76f8\u540c\u7684\u60c5\u51b5:\n     * 1\uff0e\u5fc5\u987b\u58f0\u660esql\u65f6\uff0c\u4f7f\u7528\u7c7b\u7684\u5c5e\u6027\u540d\u6765\u547d\u540d\u5b57\u6bb5\u7684\u522b\u540d\n     * 2\uff0e\u4f7f\u7528ResultSetMetaData\u65f6\uff0c\u9700\u8981\u4f7f\u7528getColumnLabel()\u6765\u66ff\u6362getColumnName( ),\n     * \u83b7\u53d6\u5217\u7684\u522b\u540d\u3002\n     * \u8bf4\u660e:\u5982\u679csql\u4e2d\u6ca1\u6709\u7ed9\u5b57\u6bb5\u5176\u522b\u540d\uff0cgetColumnLabel()\u83b7\u53d6\u7684\u5c31\u662f\u5217\u540d\n     */\n    public Dept2 dept2ForQuery(String sql,Object ...args)  {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n\n            //2.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n\n            //3.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n\n            //4.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n\n            //5.\u5904\u7406\u7ed3\u679c\u96c6\n            //5.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n\n            //5.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\n            if (rs.next()){\n                Dept2 dept2 = new Dept2();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = Dept2.class.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(dept2,columnValue);\n                }\n                return dept2;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //6.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps,rs);\n        }\n        return null;\n    }\n\n    @Test\n    public void testQuery() {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        ResultSet resultSet = null;\n        try {\n            //1.\u83b7\u53d6\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n\n            //2.\u9884\u7f16\u8bd1sql\u8bed\u53e5,\u5e76\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            String sql="select * from dept2 where department_id=?";\n            ps = coon.prepareStatement(sql);\n\n            //3.\u586b\u5145\u5360\u4f4d\u7b26\n            ps.setObject(1,80);\n\n            //4.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            resultSet = ps.executeQuery();\n\n            //5.\u5904\u7406\u7ed3\u679c\u96c6\n            //next():\u5224\u65ad\u7ed3\u679c\u96c6\u7684\u4e0b\u4e00\u6761\u662f\u5426\u6709\u6570\u636e\uff0c\u6709\u5219\u8fd4\u56detrue\uff0c\u4e14\u6307\u9488\u4e0b\u79fb\uff0c\u5426\u5219\u8fd4\u56defalse\n            if (resultSet.next()) {\n                int dept_id = resultSet.getInt(1);\n                String dept_name = resultSet.getString(2);\n                int manager_id = resultSet.getInt(3);\n                int location_id = resultSet.getInt(4);\n                Dept2 dept2 = new Dept2(dept_id, dept_name, manager_id, location_id);\n                System.out.println(dept2);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //6.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps,resultSet);\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'/**\n * \u4f7f\u7528preparedStatement\u5b9e\u73b0\u9488\u5bf9\u4e0d\u540c\u7c7b\u7684\u901a\u7528\u67e5\u8be2\u65b9\u6cd5\n * @author Lhk\n */\npublic class PreparedSatementQuery {\n\n    @Test\n    public void test(){\n        String sql="select department_id departmentId,department_name departmentName from dept2 where department_id=?";\n        Dept2 d = query(Dept2.class, sql, 50);\n        System.out.println(d);\n\n        sql="select * from account where id=?";\n        Account a = query(Account.class, sql, 1);\n        System.out.println(a);\n\n        System.out.println("----------------------------");\n        sql="select * from account";\n        List<Account> list1 = getQuery(Account.class, sql);\n        list1.forEach(System.out::println);\n\n        sql="select department_id departmentId,department_name departmentName from dept2 where department_id<?";\n        List<Dept2> list2 = getQuery(Dept2.class, sql, 100);\n        list2.forEach(System.out::println);\n    }\n\n    /**\n     * \u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\u7684\u901a\u7528\u65b9\u6cd5\n     * @param clazz\n     * @param sql\n     * @param args\n     * @param <T>\n     * @return\n     */\n    public <T>T query(Class<T> clazz,String sql,Object ...args){\n        Connection coon = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n\n            //2.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n\n            //3.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n\n            //4.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n\n            //5.\u5904\u7406\u7ed3\u679c\u96c6\n            //5.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n\n            //5.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\n            if (rs.next()){\n                T t = clazz.newInstance();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = clazz.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(t,columnValue);\n                }\n                return t;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //6.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps,rs);\n        }\n        return null;\n    }\n\n    /**\n     * \u67e5\u8be2\u591a\u6761\u8bb0\u5f55\u7684\u65b9\u6cd5\n     * @param clazz\n     * @param sql\n     * @param args\n     * @param <T>\n     * @return\n     */\n    public <T> List<T> getQuery(Class<T> clazz, String sql, Object ...args) {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6\u8fde\u63a5\n            coon = jdbcUtils.getConnection();\n            //2.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n            //3.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //4.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n            \n            //5.\u5904\u7406\u7ed3\u679c\u96c6\n            //5.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            //\u521b\u5efa\u96c6\u5408\u5bf9\u8c61\n            ArrayList<T> list = new ArrayList<>();\n            //5.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\uff0c\u7ed9\u6307\u5b9a\u7684\u6bcf\u4e2at\u5bf9\u8c61\u8d4b\u503c\n            while (rs.next()){\n                T t = clazz.newInstance();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = clazz.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(t,columnValue);\n                }\n                list.add(t);\n            }\n            return list;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //6.\u5173\u95ed\u8d44\u6e90\n            jdbcUtils.closeResource(coon,ps,rs);\n        }\n        return null;\n    }\n}\n')),(0,r.kt)("h3",{id:"\u64cd\u4f5c-blob-\u7c7b\u578b\u6570\u636e"},"\u64cd\u4f5c Blob \u7c7b\u578b\u6570\u636e"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u5728\u6307\u5b9a\u4e86\u76f8\u5173\u7684 Blob \u7c7b\u578b\u4ee5\u540e\uff0c\u8fd8\u62a5\u9519\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"xxx too large"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u90a3\u4e48\u5728 mysql \u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\uff0c\u627e my.ini \u6587\u4ef6\u52a0\u4e0a\u5982\u4e0b\u7684\u914d\u7f6e\u53c2\u6570\uff1a ",(0,r.kt)("inlineCode",{parentName:"li"},"max_allowed_packet=16M")),(0,r.kt)("li",{parentName:"ul"},"\u540c\u65f6\u6ce8\u610f\uff1a\u4fee\u6539\u4e86 my.ini \u6587\u4ef6\u4e4b\u540e\uff0c\u9700\u8981\u91cd\u65b0\u542f\u52a8 mysql \u670d\u52a1")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.JDBC.lhk.JDBCutil.jdbcUtils;\nimport org.junit.Test;\nimport java.io.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\n/**\n * \u4f7f\u7528PrepareStatement\u64cd\u4f5cBlob\u6570\u636e\n * @author Lhk\n */\npublic class BlobTest {\n    /**\n     * \u5411beauty\u8868\u4e2d\u63d2\u5165blob\u6570\u636e\n     * \u4fee\u6539mysql\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\uff1aSET GLOBAL max_allowed_packet=16777216;\n     * @throws Exception\n     */\n    @Test\n    public void test()  {\n        Connection connection = null;\n        PreparedStatement ps = null;\n        FileInputStream is=null;\n        try {\n            connection = jdbcUtils.getConnection();\n            String sql="insert into beauty(name,sex,borndate,phone,photo,boyfriend_id) values(?,?,?,?,?,?) ";\n            ps = connection.prepareStatement(sql);\n            ps.setObject(1,"MM");\n            ps.setObject(2,"f");\n            ps.setObject(3,"1998-05-06");\n            ps.setObject(4,"15677775555");\n            is=new FileInputStream(new File("xc.png"));\n            ps.setBlob(5,is);\n            ps.setInt(6,3);\n            ps.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (is!=null){\n                is.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            jdbcUtils.closeResource(connection,ps);\n        }\n    }\n\n    /**\n     * \u67e5\u8be2beauty\u8868\u7684blob\u5b57\u6bb5\n     */\n    @Test\n    public void test1()  {\n        Connection connection = null;\n        PreparedStatement ps = null;\n        InputStream is=null;\n        FileOutputStream fos=null;\n        try {\n            connection = jdbcUtils.getConnection();\n            String sql="select photo from beauty where id=?";\n            ps = connection.prepareStatement(sql);\n            ps.setInt(1,27);\n            ResultSet rs = ps.executeQuery();\n            if (rs.next()){\n                is = rs.getAsciiStream("photo");\n                fos = new FileOutputStream(new File("xiaochou.png"));\n                int i=0;\n                byte[] buff=new byte[1024];\n                while((i= is.read(buff))!=-1){\n                   fos.write(buff,0, i);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (is!=null){\n                    is.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            try {\n                if (fos!=null){\n                fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        jdbcUtils.closeResource(connection,ps);\n    }\n}\n')),(0,r.kt)("h2",{id:"\u4e09\u6279\u91cf\u63d2\u5165"},"\u4e09\u3001\u6279\u91cf\u63d2\u5165"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.JDBC.lhk.JDBCutil.jdbcUtils;\nimport org.junit.Test;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.Statement;\n\n/**\n * \u5b9e\u73b0\u6279\u91cf\u63d2\u5165\u64cd\u4f5c,\u4f7f\u7528PreparedStatement\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u6279\u91cf\u63d2\u5165\n * update\u3001 delete\u672c\u8eab\u5c31\u5177\u6709\u6279\u91cf\u64cd\u4f5c\u7684\u6548\u679c\u3002\n * \u6b64\u65f6\u7684\u6279\u91cf\u64cd\u4f5c\uff0c\u4e3b\u8981\u6307\u7684\u662f\u6279\u91cf\u63d2\u5165\u3002\n * \u5411goods\u8868\u4e2d\u63d2\u516520000\u6761\u6570\u636e\n * @author Lhk\n */\npublic class InsertTest {\n    //\u65b9\u5f0f1\uff1a\u4f7f\u7528Statement\u5b9e\u73b0\u6279\u91cf\u63d2\u5165\u64cd\u4f5c\n    @Test\n    public void test1() throws Exception {\n        long start = System.currentTimeMillis();\n        Connection connection = jdbcUtils.getConnection();\n        Statement sm = connection.createStatement();\n        for (int i=1;i<=20000;i++){\n            String sql="insert into goods(name) values(\'name_+"+i+"\')";\n            sm.execute(sql);\n        }\n        long end = System.currentTimeMillis();\n        System.out.println("\u82b1\u8d39\u65f6\u95f4\uff1a"+(end-start)+"ms");//\u82b1\u8d39\u65f6\u95f4\uff1a19844ms\n        jdbcUtils.closeResource(connection,sm);\n    }\n\n    //\u65b9\u5f0f2\uff1a\u4f7f\u7528PrepareStatement\u5b9e\u73b0\u6279\u91cf\u63d2\u5165\u64cd\u4f5c\n    @Test\n    public void test2() throws Exception {\n        long start = System.currentTimeMillis();\n        Connection connection = jdbcUtils.getConnection();\n        String sql="insert into goods(name) values(?)";\n        PreparedStatement ps = connection.prepareStatement(sql);\n        for (int i=1;i<=20000;i++){\n            ps.setString(1,"name_"+i);\n            ps.executeUpdate();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println("\u82b1\u8d39\u65f6\u95f4\uff1a"+(end-start)+"ms");//\u82b1\u8d39\u65f6\u95f4\uff1a19802ms\n        jdbcUtils.closeResource(connection,ps);\n    }\n\n    //\u65b9\u5f0f3\n    /*\n     * \u4fee\u65391\uff1a\u4f7f\u7528 addBatch() / executeBatch() / clearBatch()\n     * \u4fee\u65392\uff1amysql\u670d\u52a1\u5668\u9ed8\u8ba4\u662f\u5173\u95ed\u6279\u5904\u7406\u7684\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u53c2\u6570\uff0c\u8ba9mysql\u5f00\u542f\u6279\u5904\u7406\u7684\u652f\u6301\u3002\n     *       ?rewriteBatchedStatements=true \u5199\u5728\u914d\u7f6e\u6587\u4ef6jdbc.properties\u7684url\u540e\u9762\n     * \u4fee\u65393\uff1a\u4f7f\u7528\u66f4\u65b0\u7684mysql \u9a71\u52a8\uff1amysql-connector-java-5.1.37-bin.jar\n     *\n     */\n    @Test\n    public void test3()  {\n        Connection connection = null;\n        PreparedStatement ps = null;\n        try {\n            long start = System.currentTimeMillis();\n            connection = jdbcUtils.getConnection();\n            String sql="insert into goods(name) values(?)";\n            ps = connection.prepareStatement(sql);\n            for (int i=1;i<=20000;i++){\n                ps.setString(1,"name_"+i);\n                //1.\u6512sql\n                ps.addBatch();\n                if(i%500==0){//\u6512500\u6761sql\n                    //2.\u6267\u884c\n                    ps.executeBatch();\n                    //3.\u6e05\u7a7aBatch\n                    ps.clearBatch();\n                }\n            }\n            long end = System.currentTimeMillis();\n            System.out.println("\u82b1\u8d39\u65f6\u95f4\uff1a"+(end-start)+"ms");//\u82b1\u8d39\u65f6\u95f4\uff1a682ms\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        jdbcUtils.closeResource(connection,ps);\n    }\n\n    //\u65b9\u5f0f4\n    /*\n     * \u5728\u65b9\u5f0f3\u7684\u57fa\u7840\u4e0a\u64cd\u4f5c\n     * \u4f7f\u7528 Connection \u7684 setAutoCommit(false) / commit() \u53d6\u6d88\u81ea\u52a8\u63d0\u4ea4\n     */\n    @Test\n    public void test4() throws Exception {\n        long start = System.currentTimeMillis();\n        Connection connection = jdbcUtils.getConnection();\n\n        //\u53d6\u6d88\u81ea\u52a8\u63d0\u4ea4\n        connection.setAutoCommit(false);\n\n        String sql="insert into goods(name) values(?)";\n        PreparedStatement ps = connection.prepareStatement(sql);\n        for (int i=1;i<=20000;i++){\n            ps.setString(1,"name_"+i);\n            //1.\u6512sql\n            ps.addBatch();\n            if (i%500==0){\n                //2.\u6267\u884c\n                ps.executeBatch();\n                //3.\u6e05\u7a7a\n                ps.clearBatch();\n            }\n        }\n        //\u63d0\u4ea4\u6570\u636e\n        connection.commit();\n        long end = System.currentTimeMillis();\n        System.out.println("\u82b1\u8d39\u65f6\u95f4\uff1a"+(end-start)+"ms");//\u82b1\u8d39\u65f6\u95f4\uff1a623ms\n        jdbcUtils.closeResource(connection,ps);\n    }\n}\n')),(0,r.kt)("h2",{id:"\u56db\u6570\u636e\u5e93\u4e8b\u52a1"},"\u56db\u3001\u6570\u636e\u5e93\u4e8b\u52a1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.jdbc.lhk.Bean.Account;\nimport com.jdbc.lhk.utils.JdbcUtils;\nimport org.junit.Test;\nimport java.lang.reflect.Field;\nimport java.sql.*;\n\n/**\n * \u4e8b\u52a1\uff1a\u4e00\u7ec4\u903b\u8f91\u64cd\u4f5c\u5355\u5143,\u4f7f\u6570\u636e\u4ece\u4e00\u79cd\u72b6\u6001\u53d8\u6362\u5230\u53e6\u4e00\u79cd\u72b6\u6001\u3002\n *\n * \u4e8b\u52a1\u5904\u7406\uff08\u4e8b\u52a1\u64cd\u4f5c\uff09\uff1a\u4fdd\u8bc1\u6240\u6709\u4e8b\u52a1\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u4f5c\u5355\u5143\u6765\u6267\u884c\uff0c\u5373\u4f7f\u51fa\u73b0\u4e86\u6545\u969c\uff0c\u90fd\u4e0d\u80fd\u6539\u53d8\u8fd9\u79cd\u6267\u884c\u65b9\u5f0f\u3002\n * \u5f53\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u6267\u884c\u591a\u4e2a\u64cd\u4f5c\u65f6\uff0c\u8981\u4e48\u6240\u6709\u7684\u4e8b\u52a1\u90fd\u88ab\u63d0\u4ea4(commit),\u90a3\u4e48\u8fd9\u4e9b\u4fee\u6539\u5c31\u6c38\u4e45\u5730\u4fdd\u5b58\u4e0b\u6765\uff1b\u8981\u4e48\u6570\u636e\n * \u5e93\u7ba1\u7406\u7cfb\u7edf\u5c06\u653e\u5f03\u6240\u4f5c\u7684\u6240\u6709\u4fee\u6539\uff0c\u6574\u4e2a\u4e8b\u52a1\u56de\u6eda(rollback)\u5230\u6700\u521d\u72b6\u6001\n *\n * \u6570\u636e\u4e00\u65e6\u63d0\u4ea4\uff0c\u5c31\u4e0d\u53ef\u56de\u6eda\u3002\n *\n *4.\u54ea\u4e9b\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u6570\u636e\u7684\u81ea\u52a8\u63d0\u4ea4?\n * DDL\u64cd\u4f5c\u4e00\u65e6\u6267\u884c,\u90fd\u4f1a\u81ea\u52a8\u63d0\u4ea4\u3002\n *      set autocommit = false\u5bf9DDL\u64cd\u4f5c\u5931\u6548\n * DML\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u2014\u65e6\u6267\u884c,\u5c31\u4f1a\u81ea\u52a8\u63d0\u4ea4\u3002\n *      >\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7set autocommit = false\u7684\u65b9\u5f0f\u53d6\u6d88DML\u64cd\u4f5c\u7684\u81ea\u52a8\u63d0\u4ea4\u3002\n * \u9ed8\u8ba4\u5728\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u4f1a\u81ea\u52a8\u7684\u63d0\u4ea4\u6570\u636e\n *\n * @author Lhk\n */\npublic class TransactionTest {\n    /**\n     * \u4e0d\u8003\u8651\u4e8b\u52a1\u7684\u8f6c\u8d26\u64cd\u4f5c\n     * \u9488\u5bf9account\u8868\uff1a\n     * \u5f20\u65e0\u5fcc\u7ed9\u8d75\u654f\u8f6c\u8d26100\n     *\n     */\n    @Test\n    public void test(){\n        String sql="update account set balance=balance-100 where username=\'?\'";\n        update(sql,"\u5f20\u65e0\u5fcc");\n\n        //\u9047\u5230\u5f02\u5e38\uff08\u7f51\u7edc\u5f02\u5e38\u7b49\u7b49\uff09\n        System.out.println(10/0);\n\n        String sql2="update account set balance=balance+100 where username=\'?\'";\n        update(sql2,"\u8d75\u654f");\n        System.out.println("\u8f6c\u8d26\u6210\u529f");\n    }\n\n    //\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5-----1.0\n    public int update(String sql, Object ...args)  {\n        Connection coon = null;\n        PreparedStatement ps = null;\n        try {\n            //1.\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n            coon = JdbcUtils.getConnection();\n            //2.\u9884\u7f16\u8bd1sql\u8bed\u53e5\n            ps = coon.prepareStatement(sql);\n            //3.\u586b\u5145\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //4.\u6267\u884c\n            return ps.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //5.\u5173\u95ed\u8d44\u6e90\n            JdbcUtils.closeResource(coon,ps);\n        }\n        return 0;\n    }\n\n    /**\n     * \u8003\u8651\u4e8b\u52a1\u540e\u7684\u8f6c\u8d26\u64cd\u4f5c\n     * \u9488\u5bf9account\u8868\uff1a\n     * \u5f20\u65e0\u5fcc\u7ed9\u8d75\u654f\u8f6c\u8d26100\n     */\n    @Test\n    public void test1()  {\n        Connection coon = null;\n        try {\n            coon = JdbcUtils.getConnection();\n            //1.\u53d6\u6d88\u81ea\u52a8\u63d0\u4ea4\n            coon.setAutoCommit(false);\n            \n            String sql="update account set balance=balance-100 where username=?";\n            update(coon,sql,"\u5f20\u65e0\u5fcc");\n\n            //\u9047\u5230\u5f02\u5e38\uff08\u7f51\u7edc\u5f02\u5e38\u7b49\u7b49\uff09\n            System.out.println(10/0);\n\n            String sql2="update account set balance=balance+100 where username=?";\n            update(coon,sql2,"\u8d75\u654f");\n            System.out.println("\u8f6c\u8d26\u6210\u529f");\n\n            //2.\u63d0\u4ea4\u6570\u636e\n            coon.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            //3.\u9047\u5230\u5f02\u5e38\u56de\u6eda\u6570\u636e\n            try {\n                coon.rollback();\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n        } finally {\n            //\u6062\u590d\u8fde\u63a5\u81ea\u52a8\u63d0\u4ea4\n            try {\n                coon.setAutoCommit(true);\n            } catch (SQLException throwables) {\n                throwables.printStackTrace();\n            }\n            JdbcUtils.closeResource(coon,null);\n        }\n    }\n\n    //\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5-----2.0\uff08\u8003\u8651\u4e8b\u52a1\uff09\n    public int update(Connection coon,String sql, Object ...args)  {\n        PreparedStatement ps = null;\n        try {\n            //1.\u9884\u7f16\u8bd1sql\u8bed\u53e5\n            ps = coon.prepareStatement(sql);\n            //2.\u586b\u5145\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //3.\u6267\u884c\n            return ps.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //4.\u5173\u95ed\u8d44\u6e90,\u8fd9\u91cc\u4e0d\u5173\u95ed\u8fde\u63a5\uff1b\u9ed8\u8ba4\u5728\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u4f1a\u81ea\u52a8\u7684\u63d0\u4ea4\u6570\u636e\n            JdbcUtils.closeResource(null,ps);\n        }\n        return 0;\n    }\n\n//***********************************************************************\n\n    /**\n     * \u8bbe\u7f6e\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\n     * \u67e5\u8be2\u8bb0\u5f55\n     */\n    @Test\n    public void test3() throws Exception {\n        Connection coon= JdbcUtils.getConnection();\n        //\u83b7\u53d6\u5f53\u524d\u7684\u8fde\u63a5\u7684\u9694\u79bb\u7ea7\u522b\uff08\u5168\u5c40\u7684\u9694\u79bb\u7ea7\u522b\uff09\n        System.out.println(coon.getTransactionIsolation());\n        //\u8bbe\u7f6e\u5f53\u524d\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\n        //coon.setTransactionIsolation();\n        //\u53d6\u6d88\u81ea\u52a8\u63d0\u4ea4\n        coon.setAutoCommit(false);\n        String sql="select id,username,balance from account where id=?";\n        Account a1 = query(coon, Account.class, sql, 1);\n        System.out.println(a1);\n    }\n\n    /*\u4fee\u6539\u8bb0\u5f55*/\n    @Test\n    public void test4() throws Exception {\n        Connection coon = JdbcUtils.getConnection();\n        //\u53d6\u6d88\u81ea\u52a8\u63d0\u4ea4\n        coon.setAutoCommit(false);\n        String sql="update account set balance=? where id= ?";\n        update(coon, sql, 1500, 1);\n        Thread.sleep(15000);\n        System.out.println("\u4fee\u6539\u7ed3\u675f");\n    }\n\n    /**\n     * \u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\u7684\u901a\u7528\u65b9\u6cd5---2.0  \u8003\u8651\u4e86\u4e8b\u52a1\n     * @param clazz\n     * @param sql\n     * @param args\n     * @param <T>\n     * @return\n     */\n    public <T>T query(Connection coon,Class<T> clazz,String sql,Object ...args){\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n            //2.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //3.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n            //4.\u5904\u7406\u7ed3\u679c\u96c6\n            //4.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            //4.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\n            if (rs.next()){\n                T t = clazz.newInstance();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = clazz.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(t,columnValue);\n                }\n                return t;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //5.\u5173\u95ed\u8d44\u6e90\uff1b\u9ed8\u8ba4\u5728\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u4f1a\u81ea\u52a8\u7684\u63d0\u4ea4\u6570\u636e\n            JdbcUtils.closeResource(null,ps,rs);\n        }\n        return null;\n    }\n}\n')),(0,r.kt)("h2",{id:"\u4e94dao-\u53ca\u5176\u76f8\u5173\u5b9e\u73b0\u7c7b"},"\u4e94\u3001DAO \u53ca\u5176\u76f8\u5173\u5b9e\u73b0\u7c7b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DAO: \u5c01\u88c5\u4e86\u9488\u5bf9\u6570\u636e\u8868\u7684\u901a\u7528\u64cd\u4f5c")),(0,r.kt)("h3",{id:"basedao"},"BaseDao"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.jdbc.lhk.utils.JdbcUtils;\nimport java.lang.reflect.Field;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * DAO:\n * \u5c01\u88c5\u4e86\u9488\u5bf9\u6570\u636e\u8868\u7684\u901a\u7528\u64cd\u4f5c\n * @author Lhk\n */\npublic abstract class BaseDao {\n\n    //\u901a\u7528\u7684\u589e\u5220\u6539\u65b9\u6cd5-----2.0\uff08\u8003\u8651\u4e8b\u52a1\uff09\n    public int update(Connection coon, String sql, Object ...args)  {\n        PreparedStatement ps = null;\n        try {\n            //1.\u9884\u7f16\u8bd1sql\u8bed\u53e5\n            ps = coon.prepareStatement(sql);\n            //2.\u586b\u5145\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //3.\u6267\u884c\n            return ps.executeUpdate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //4.\u5173\u95ed\u8d44\u6e90,\u8fd9\u91cc\u4e0d\u5173\u95ed\u8fde\u63a5\n            JdbcUtils.closeResource(null,ps);\n        }\n        return 0;\n    }\n\n    /**\n     * \u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\u7684\u901a\u7528\u65b9\u6cd5---2.0  \u8003\u8651\u4e86\u4e8b\u52a1\n     * @param clazz\n     * @param sql\n     * @param args\n     * @param <T>\n     * @return\n     */\n    public <T>T query(Connection coon,Class<T> clazz,String sql,Object ...args){\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n            //2.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //3.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n            //4.\u5904\u7406\u7ed3\u679c\u96c6\n            //4.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            //4.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\n            if (rs.next()){\n                T t = clazz.newInstance();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = clazz.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(t,columnValue);\n                }\n                return t;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //5.\u5173\u95ed\u8d44\u6e90\n            JdbcUtils.closeResource(null,ps,rs);\n        }\n        return null;\n    }\n\n    /**\n     * \u67e5\u8be2\u591a\u6761\u8bb0\u5f55\u7684\u65b9\u6cd5----2.0(\u8003\u8651\u4e0a\u4e8b\u52a1)\n     * @param clazz\n     * @param sql\n     * @param args\n     * @param <T>\n     * @return\n     */\n    public <T> List<T> getQuery(Connection coon,Class<T> clazz, String sql, Object ...args) {\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            //1.\u83b7\u53d6PrepareStatement\u5b9e\u4f8b\n            ps = coon.prepareStatement(sql);\n            //2.\u586b\u5145\u5728\u5360\u4f4d\u7b26\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            //3.\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\u96c6\n            rs = ps.executeQuery();\n\n            //4.\u5904\u7406\u7ed3\u679c\u96c6\n            //4.1\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            ResultSetMetaData rsmd = rs.getMetaData();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5143\u6570\u636e\uff1a\u5373\u89e3\u91ca\u7ed3\u679c\u96c6\u7684\u76f8\u5173\u6570\u636e\n            int columnCount = rsmd.getColumnCount();//\u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u5217\u6570\n            //\u521b\u5efa\u96c6\u5408\u5bf9\u8c61\n            ArrayList<T> list = new ArrayList<>();\n            //4.2\u5904\u7406\u7ed3\u679c\u96c6\u6bcf\u4e00\u884c\u6570\u636e\u7684\u5404\u4e2a\u5217\uff0c\u7ed9\u6307\u5b9a\u7684\u6bcf\u4e2at\u5bf9\u8c61\u8d4b\u503c\n            while (rs.next()){\n                T t = clazz.newInstance();\n                for (int i=0;i<columnCount;i++){\n                    //\u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u5217\u503c\n                    Object columnValue = rs.getObject(i + 1);\n                    //\u83b7\u53d6\u7ed3\u679c\u96c6\u6bcf\u4e00\u5217\u7684\u5217\u540d\n                    //String columnName = rsmd.getColumnName(i + 1);\n                    String columnLabel = rsmd.getColumnLabel(i + 1);\n                    //\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u7ed9dept2\u5bf9\u8c61\u6307\u5b9a\u7684columnName\u5c5e\u6027\uff0c\u8d4b\u503c\u4e3acolumnValue\n                    //\u4f7f\u7528getColumnLabel()\u66ff\u6362getColumnName(),\u6765\u83b7\u53d6\u5217\u7684\u522b\u540d\n                    Field field = clazz.getDeclaredField(columnLabel);\n                    field.setAccessible(true);\n                    field.set(t,columnValue);\n                }\n                list.add(t);\n            }\n            return list;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //6.\u5173\u95ed\u8d44\u6e90\n            JdbcUtils.closeResource(null,ps,rs);\n        }\n        return null;\n    }\n\n    //\u7528\u4e8e\u67e5\u8be2\u7279\u6b8a\u503c\u7684\u901a\u7528\u65b9\u6cd5\n    public <E> E getValue(Connection coon,String sql,Object ...args) {\n        PreparedStatement ps=null;\n        ResultSet rs=null;\n        try {\n             ps = coon.prepareStatement(sql);\n            for (int i=0;i<args.length;i++){\n                ps.setObject(i+1,args[i]);\n            }\n            rs = ps.executeQuery();\n            if(rs.next()){\n                return (E) rs.getObject(1);\n            }\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(null,ps,rs);\n        }\n        return null;\n    }\n}\n")),(0,r.kt)("h3",{id:"\u5b9e\u4f53\u7c7b"},"\u5b9e\u4f53\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'  /**\n   * @author Lhk\n   */\n  public class Account {\n    private int id ;\n    private String username;\n    private double balance;\n  \n    public Account() {\n    }\n  \n    public Account(int id, String username, double balance) {\n      this.id = id;\n      this.username = username;\n      this.balance = balance;\n    }\n  \n    public int getId() {\n      return id;\n    }\n  \n    public void setId(int id) {\n      this.id = id;\n    }\n  \n    public String getUsername() {\n      return username;\n    }\n  \n    public void setUsername(String username) {\n      this.username = username;\n    }\n  \n    public double getBalance() {\n      return balance;\n    }\n  \n    public void setBalance(double balance) {\n      this.balance = balance;\n    }\n  \n    @Override\n    public String toString() {\n      return "Account{" +\n      "id=" + id +\n      ", username=\'" + username + \'\\\'\' +\n      ", balance=" + balance +\n      \'}\';\n    }\n  }\n')),(0,r.kt)("h3",{id:"\u5de5\u5177\u7c7b"},"\u5de5\u5177\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**\n * \u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u548c\u5173\u95ed\u8d44\u6e90\n * @author Lhk\n */\npublic class JdbcUtils {\n    /**\n     * \u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n     * @return Connection\n     * @throws Exception\n     */\n    public static Connection getConnection() throws Exception {\n        //1.\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u76844\u4e2a\u57fa\u672c\u4fe1\u606f\n        InputStream resource = ClassLoader.getSystemClassLoader().getResourceAsStream("jdbc.properties");\n        Properties pros=new Properties();\n        pros.load(resource);\n        String url = pros.getProperty("url");\n        String user = pros.getProperty("user");\n        String password = pros.getProperty("password");\n        String driverClass = pros.getProperty("driverClass");\n        //2.\u52a0\u8f7dDriver\u7c7b\n        Class.forName(driverClass);\n        //3.\u83b7\u53d6\u8fde\u63a5\n        Connection connection = DriverManager.getConnection(url, user, password);\n        return connection;\n    }\n\n    /**\n     * \u5173\u95edConnection\u548cPreparedStatement\n     * @param connection\n     * @param ps\n     */\n    public static void closeResource(Connection connection, Statement ps){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    public static void closeResource(Connection connection, Statement ps, ResultSet rs){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (rs!=null)\n                rs.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"\u9488\u5bf9\u4e8e\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u5e38\u7528\u64cd\u4f5c\u7684-dao-\u63a5\u53e3"},"\u9488\u5bf9\u4e8e\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u5e38\u7528\u64cd\u4f5c\u7684 DAO \u63a5\u53e3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.jdbc.lhk.Bean.Account;\nimport java.sql.Connection;\nimport java.sql.Date;\nimport java.util.List;\n\n/**\n * \u6b64\u63a5\u53e3\u7528\u4e8e\u89c4\u8303\u9488\u5bf9\u4e8eaccount\u8868\u7684\u5e38\u5e38\u7528\u64cd\u4f5c\n * @author Lhk\n */\npublic interface AccountDao {\n\n    /**\n     * \u5c06account\u5bf9\u8c61\u6dfb\u52a0\u5230\u6570\u636e\u8868\u4e2d\n     * @param coon\n     * @param account\n     */\n    void insert(Connection coon, Account account);\n\n    /**\n     * \u6839\u636eid\u5220\u9664\u8868\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\n     * @param coon\n     * @param id\n     */\n    void deleteById(Connection coon,int id);\n\n    /**\n     * \u6839\u636e\u5185\u5b58\u4e2d\u7684account\u7684\u5bf9\u8c61\u4fee\u6539\u8868\u4e2d\u7684\u6307\u5b9a\u7684\u8bb0\u5f55\n     * @param coon\n     * @param account\n     */\n    void updateById(Connection coon,Account account);\n\n    /**\n     * \u6839\u636e\u6307\u5b9a\u7684id\u4ece\u67e5\u8be2\u5f97\u5230\u5bf9\u5e94\u7684Account\u5bf9\u8c61\n     * @param coon\n     * @param id\n     */\n    Account getAccountById(Connection coon,int id);\n\n    /**\n     * \u67e5\u8be2\u8868\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u6784\u6210\u7684\u96c6\u5408\n     * @param coon\n     * @return\n     */\n    List<Account> getAll(Connection coon);\n\n    /**\n     * \u8fd4\u56de\u8868\u4e2d\u7684\u8bb0\u5f55\u6761\u6570\n     * @param coon\n     * @return\n     */\n    Long getCount(Connection coon);\n}\n")),(0,r.kt)("h3",{id:"dao-\u63a5\u53e3\u5b9e\u73b0\u7c7b"},"DAO \u63a5\u53e3\u5b9e\u73b0\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.jdbc.lhk.Bean.Account;\nimport java.sql.Connection;\nimport java.util.List;\n\n/**\n * @author Lhk\n */\npublic class AccountDaoImpl extends BaseDao implements AccountDao{\n    @Override\n    public void insert(Connection coon, Account account) {\n        String sql ="insert into account(username,balance) values(?,?)";\n        update(coon,sql,account.getUsername(),account.getBalance());\n    }\n\n    @Override\n    public void deleteById(Connection coon, int id) {\n        String sql="delete from account where id=?";\n        update(coon,sql,id);\n    }\n\n    @Override\n    public void updateById(Connection coon, Account account) {\n        String sql="update account set username=?,balance=? where id=?";\n        update(coon,sql,account.getUsername(),account.getBalance(),account.getId());\n    }\n\n    @Override\n    public Account getAccountById(Connection coon, int id) {\n        String sql="select id,username,balance from account where id=?";\n        Account query = query(coon, Account.class, sql, id);\n        return query;\n    }\n\n    @Override\n    public List<Account> getAll(Connection coon) {\n        String sql="select id,username,balance from account";\n        List<Account> query = getQuery(coon, Account.class, sql);\n        return query;\n    }\n\n    @Override\n    public Long getCount(Connection coon) {\n        String sql="select count(*) from account";\n        return getValue(coon, sql);\n    }\n}\n')),(0,r.kt)("h3",{id:"\u6d4b\u8bd5"},"\u6d4b\u8bd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.jdbc.lhk.Bean.Account;\nimport com.jdbc.lhk.DAO.AccountDaoImpl;\nimport com.jdbc.lhk.utils.JdbcUtils;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Connection;\nimport java.util.List;\n\n/**\n * @author Lhk\n */\nclass AccountDaoImplTest {\n\n    AccountDaoImpl accountDaoImpl=new  AccountDaoImpl();\n\n    @Test\n    void insert(){\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            Account account = new Account(3,"lhk",15000);\n            accountDaoImpl.insert(connection,account);\n            System.out.println("\u6dfb\u52a0\u6210\u529f");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n\n    @Test\n    void deleteById() {\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            accountDaoImpl.deleteById(connection,3);\n            System.out.println("\u5220\u9664\u6210\u529f");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n\n    @Test\n    void updateById() {\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            Account account = new Account(1,"\u65e0\u5fcc",15000);\n            accountDaoImpl.updateById(connection,account);\n            System.out.println("\u4fee\u6539\u6210\u529f");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n\n    @Test\n    void getAccountById() {\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            Account account = accountDaoImpl.getAccountById(connection, 1);\n            System.out.println(account);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n\n    @Test\n    void getAll() {\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            List<Account> all = accountDaoImpl.getAll(connection);\n            all.forEach(System.out::println);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n\n    @Test\n    void getCount() {\n        Connection connection = null;\n        try {\n            connection = JdbcUtils.getConnection();\n            Long count = accountDaoImpl.getCount(connection);\n            System.out.println("account\u8868\u4e2d\u5171\u6709"+count+"\u6761\u8bb0\u5f55");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(connection,null);\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"\u516d\u6570\u636e\u5e93\u8fde\u63a5\u6c60"},"\u516d\u3001\u6570\u636e\u5e93\u8fde\u63a5\u6c60"),(0,r.kt)("h3",{id:"c3p0-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"},"C3P0 \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"C3P0 \u914d\u7f6e\u6587\u4ef6 ",(0,r.kt)("inlineCode",{parentName:"p"},"c3p0-config.xml")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8" ?>\n<c3p0-config>\n\n    <named-config name="MyC3P0">\n        \x3c!-- \u63d0\u4f9b\u83b7\u53d6\u8fde\u63a5\u76844\u4e2a\u57fa\u672c\u4fe1\u606f  --\x3e\n        <property name="driverClass">com.mysql.jdbc.Driver</property>\n        <property name="jdbcUrl">jdbc:mysql://localhost:3306/test</property>\n        <property name="user">root</property>\n        <property name="password">123456</property>\n\n        \x3c!--  \u8fdb\u884c\u6570\u636e\u5e93\u7ba1\u7406\u7684\u57fa\u672c\u4fe1\u606f    --\x3e\n        \x3c!-- acquireIncrement\uff1a\u5f53\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u8fde\u63a5\u6570\u4e0d\u591f\u65f6\uff0cc3p0\u4e00\u6b21\u6027\u5411\u6570\u636e\u5e93\u670d\u52a1\u5668\u7533\u8bf7\u7684\u8fde\u63a5\u6570     --\x3e\n        <property name="acquireIncrement">5</property>\n        \x3c!--  initialPoolSize\uff1ac3p0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u521d\u59cb\u5316\u65f6\u7684\u8fde\u63a5\u6570    --\x3e\n        <property name="initialPoolSize">10</property>\n        \x3c!-- minPoolSize\uff1ac3p0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7ef4\u62a4\u7684\u6700\u5c11\u7684\u8fde\u63a5\u6570    --\x3e\n        <property name="minPoolSize">10</property>\n        \x3c!-- maxPoolSize\uff1ac3p0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7ef4\u62a4\u7684\u6700\u591a\u7684\u8fde\u63a5\u6570     --\x3e\n        <property name="maxPoolSize">100</property>\n\n        \x3c!-- maxStatements\uff1ac3p0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7ef4\u62a4\u7684\u6700\u591a\u7684Statement\u7684\u4e2a\u6570     --\x3e\n        <property name="maxStatements">50</property>\n        \x3c!-- maxStatementsPerConnection\uff1a\u6bcf\u4e2a\u8fde\u63a5\u4e2d\u53ef\u4ee5\u6700\u591a\u4f7f\u7528\u7684Statement\u7684\u4e2a\u6570     --\x3e\n        <property name="maxStatementsPerConnection">2</property>\n\n    </named-config>\n</c3p0-config>\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.mchange.v2.c3p0.ComboPooledDataSource;\nimport com.mchange.v2.c3p0.DataSources;\nimport org.junit.Test;\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n/**\n * \u901a\u8fc7 C3P0 \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n * @author Lhk\n */\npublic class C3P0 {\n        //\u65b9\u5f0f\u4e00\uff1a\n        @Test\n        public void testGetConnection() throws PropertyVetoException, SQLException {\n                //\u83b7\u53d6C3P0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n                ComboPooledDataSource cpds = new ComboPooledDataSource();\n                cpds.setDriverClass( "com.mysql.jdbc.Driver" ); //loads the jdbc driver\n                cpds.setJdbcUrl("jdbc:mysql://localhost:3306/test");\n                cpds.setUser("root");\n                cpds.setPassword("123456");\n                //\u901a\u8fc7\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\uff0c\u5bf9\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u8fdb\u884c\u7ba1\u7406  \n                //\u8bbe\u7f6e\u521d\u59cb\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u4e2d\u7684\u8fde\u63a5\u6570\n                cpds.setInitialPoolSize(10);\n                Connection coon = cpds.getConnection();\n                System.out.println(coon);\n                //\u9500\u6bc1c3p0\u8fde\u63a5\u6c60\n                DataSources.destroy(cpds);\n        }\n\n        //\u65b9\u5f0f\u4e8c\uff1a\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        @Test\n        public void testGetConnection1() throws SQLException {\n                ComboPooledDataSource cpds = new ComboPooledDataSource("MyC3P0");\n                Connection conn = cpds.getConnection();\n                System.out.println(conn);\n                DataSources.destroy( cpds );\n        }\n}\n')),(0,r.kt)("h3",{id:"dbcp-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"},"DBCP \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"DBCP \u914d\u7f6e\u6587\u4ef6 ",(0,r.kt)("inlineCode",{parentName:"p"},"dbcp.properties")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"#\u57fa\u672c\u914d\u7f6e\u4fe1\u606f\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql:///test\nusername=root\npassword=123456\n\n#\u8bbe\u7f6e\u5176\u4ed6\u7ba1\u7406\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u76f8\u5173\u5c5e\u6027\ninitialSize=10\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.commons.dbcp.BasicDataSource;\nimport org.apache.commons.dbcp.BasicDataSourceFactory;\nimport org.junit.Test;\nimport javax.sql.DataSource;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\n/**\n * \u901a\u8fc7 DBCP \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n * @author Lhk\n */\npublic class DBCP {\n\n    /**\n     * \u83b7\u53d6DBCP\u8fde\u63a5\u6c60\u65b9\u5f0f\u4e00\uff08\u4e0d\u63a8\u8350\uff09\n     * @throws SQLException\n     */\n    @Test\n    public void testGetConnection() throws SQLException {\n        //\u521b\u5efaDBCP\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        BasicDataSource source=new BasicDataSource();\n        //\u57fa\u672c\u914d\u7f6e\u4fe1\u606f\n        source.setDriverClassName("com.mysql.jdbc.Driver");\n        source.setUrl("jdbc:mysql:///test");\n        source.setUsername("root");\n        source.setPassword("123456");\n        //\u8bbe\u7f6e\u5176\u4ed6\u7ba1\u7406\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u76f8\u5173\u5c5e\u6027\n        source.setInitialSize(10);\n        source.setMaxActive(10);\n        Connection coon = source.getConnection();\n        System.out.println(coon);\n    }\n\n    /**\n     * \u83b7\u53d6DBCP\u8fde\u63a5\u6c60\u65b9\u5f0f\u4e8c\n     */\n    private static Properties properties=null;\n    static{\n        try {\n            //\u521b\u5efa\u4e00\u4e2aProperties\u5bf9\u8c61\n            properties = new Properties();\n            //\u8bfb\u53d6 dbcp.properties \u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\n            //\u65b9\u5f0f\u4e00\n            //InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("dbcp.properties");\n            //\u65b9\u5f0f\u4e8c\n            FileInputStream is = new FileInputStream(new File("src/dbcp.properties"));\n            //\u5c06\u6d41\u5bf9\u8c61\u52a0\u8f7d\u5230Properties\u5bf9\u8c61\u4e2d\n            properties.load(is);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void testGetConnection1() throws Exception {\n        //\u521b\u5efaDBCP\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        DataSource source = BasicDataSourceFactory.createDataSource(properties);\n        Connection coon = source.getConnection();\n        System.out.println(coon);\n    }\n}\n')),(0,r.kt)("h3",{id:"druid-\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"},"Druid \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Druid \u914d\u7f6e\u6587\u4ef6 ",(0,r.kt)("inlineCode",{parentName:"p"},"druid.properties")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"#\u57fa\u672c\u914d\u7f6e\u4fe1\u606f\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql:///test\nusername=root\npassword=123456\n\n#\u8bbe\u7f6e\u5176\u4ed6\u7ba1\u7406\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u76f8\u5173\u5c5e\u6027\ninitialSize=10\nmaxActive=10\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\nimport org.junit.Test;\n\nimport javax.sql.DataSource;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\n/**\n * \u901a\u8fc7 Druid \u6570\u636e\u5e93\u8fde\u63a5\u6c60\u6280\u672f\u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\n * @author Lhk\n */\npublic class Druid {\n    @Test\n    public void getConnection() throws Exception {\n        Properties properties=new Properties();\n        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("druid.properties");\n        properties.load(is);\n        DataSource source = DruidDataSourceFactory.createDataSource(properties);\n        Connection conn = source.getConnection();\n        System.out.println(conn);\n    }\n}\n')),(0,r.kt)("h3",{id:"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5de5\u5177\u7c7b"},"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5de5\u5177\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.alibaba.druid.pool.DruidDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.apache.commons.dbcp.BasicDataSourceFactory;\nimport javax.sql.DataSource;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**\n * \u83b7\u53d6\u6570\u636e\u5e93\u8fde\u63a5\u548c\u5173\u95ed\u8d44\u6e90\n * @author Lhk\n */\npublic class JdbcUtils {\n\n    //C3P0\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u5373\u53ef\n    private static ComboPooledDataSource cpds = new ComboPooledDataSource("MyC3P0");\n    /**\n     * \u4f7f\u7528C3PO\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     * @throws SQLException\n     */\n    public static Connection getConnection1() throws SQLException {\n        Connection conn = cpds.getConnection();\n        return conn;\n    }\n\n    /**\n     * \u4f7f\u7528DBCP\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     * @throws Exception\n     */\n    private static Properties properties=null;\n    private static DataSource source=null;\n    static {\n        try {\n            properties = new Properties();\n            FileInputStream is = new FileInputStream(new File("src/dbcp.properties"));\n            //\u5c06\u6d41\u5bf9\u8c61\u52a0\u8f7d\u5230Properties\u5bf9\u8c61\u4e2d\n            properties.load(is);\n            source = BasicDataSourceFactory.createDataSource(properties);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Connection getConnection2() throws Exception {\n        Connection coon = source.getConnection();\n        return coon;\n    }\n\n    /**\n     * \u4f7f\u7528 Druid \u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     */\n    private static DataSource source1;\n    static {\n        try {\n            Properties properties=new Properties();\n            InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("druid.properties");\n            properties.load(is);\n            source1 = DruidDataSourceFactory.createDataSource(properties);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static Connection getConnection3() throws SQLException {\n        Connection conn = source1.getConnection();\n        return conn;\n    }\n\n    /**\n     * \u5173\u95edConnection\u548cPreparedStatement\n     * @param connection\n     * @param ps\n     */\n    public static void closeResource(Connection connection, Statement ps){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    public static void closeResource(Connection connection, Statement ps, ResultSet rs){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (rs!=null)\n                rs.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"\u4e03apache-dbutils-\u5b9e\u73b0-crud-\u64cd\u4f5c"},"\u4e03\u3001Apache-DBUtils \u5b9e\u73b0 CRUD \u64cd\u4f5c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"commons-dbutils \u662f Apache \u7ec4\u7ec7\u63d0\u4f9b\u7684\u4e00\u4e2a\u5f00\u6e90 JDBC \u5de5\u5177\u7c7b\u5e93",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5b83\u5c01\u88c5\u4e86\u9488\u5bf9\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u64cd\u4f5c\uff0c\u5b66\u4e60\u6210\u672c\u6781\u4f4e\uff0c\u5e76\u4e14\u4f7f\u7528 dbutils \u80fd\u6781\u5927\u7b80\u5316 jdbc \u7f16\u7801\u7684\u5de5\u4f5c\u91cf\uff0c\u540c\u65f6\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd")))),(0,r.kt)("h3",{id:"\u5de5\u5177\u7c7b-1"},"\u5de5\u5177\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.alibaba.druid.pool.DruidDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.apache.commons.dbcp.BasicDataSourceFactory;\nimport org.apache.commons.dbutils.DbUtils;\nimport javax.sql.DataSource;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\n/**\n * DbUtils\n * @author Lhk\n */\npublic class JdbcUtils {\n    /**\n     * \u4f7f\u7528C3PO\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     * @throws SQLException\n     */\n    //\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u5373\u53ef\n    private static ComboPooledDataSource cpds = new ComboPooledDataSource("MyC3P0");\n    public static Connection getConnection1() throws SQLException {\n        Connection conn = cpds.getConnection();\n        return conn;\n    }\n\n    /**\n     * \u4f7f\u7528DBCP\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     * @throws Exception\n     */\n    private static Properties properties=null;\n    private static DataSource source=null;\n    static {\n        try {\n            properties = new Properties();\n            FileInputStream is = new FileInputStream(new File("src/dbcp.properties"));\n            //\u5c06\u6d41\u5bf9\u8c61\u52a0\u8f7d\u5230Properties\u5bf9\u8c61\u4e2d\n            properties.load(is);\n            source = BasicDataSourceFactory.createDataSource(properties);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Connection getConnection2() throws Exception {\n        Connection coon = source.getConnection();\n        return coon;\n    }\n\n    /**\n     * \u4f7f\u7528Druid\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6280\u672f\n     * @return\n     */\n    private static DataSource source1;\n    static {\n        try {\n            Properties properties=new Properties();\n            InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("druid.properties");\n            properties.load(is);\n            source1 = DruidDataSourceFactory.createDataSource(properties);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static Connection getConnection3() throws SQLException {\n        Connection conn = source1.getConnection();\n        return conn;\n    }\n\n    /**\n     * \u5173\u95edConnection\u548cPreparedStatement\n     * @param connection\n     * @param ps\n     */\n    public static void closeResource(Connection connection, Statement ps){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    public static void closeResource(Connection connection, Statement ps, ResultSet rs){\n        //\u8d44\u6e90\u5173\u95ed\n        try {\n            if (ps!=null)\n                ps.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (connection!=null)\n                connection.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n        try {\n            if (rs!=null)\n                rs.close();\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        }\n    }\n\n    /**\n     * \u4f7f\u7528dbutils.jar\u4e2d\u7684DbUtils\u5de5\u5177\u7c7b\uff0c\u5b9e\u73b0\u8d44\u6e90\u7684\u5173\u95ed\n     * @param connection\n     * @param ps\n     * @param rs\n     */\n    public static void closeResource1(Connection connection, Statement ps, ResultSet rs){\n        //try {\n        //    DbUtils.close(connection);\n        //    DbUtils.close(rs);\n        //    DbUtils.close(ps);\n        //} catch (SQLException throwables) {\n        //    throwables.printStackTrace();\n        //}\n        DbUtils.closeQuietly(rs);\n        DbUtils.closeQuietly(ps);\n        DbUtils.closeQuietly(connection);\n    }\n}\n')),(0,r.kt)("h3",{id:"\u6d4b\u8bd5-1"},"\u6d4b\u8bd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.jdbc.lhk.Bean.Account;\nimport com.jdbc.lhk2.utils.JdbcUtils;\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.*;\nimport org.junit.Test;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * commons-dbutils \u7684\u4f7f\u7528\n * @author Lhk\n */\npublic class QueryRunnerTest {\n\n    //\u4f7f\u7528dbutils\u6d4b\u8bd5\u63d2\u5165\u64cd\u4f5c\n    @Test\n    public void testInsert()  {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner = new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="insert into account(username,balance) values(?,?)";\n            int insertCount = queryRunner.update(conn, sql, "lhk", 12000);\n            System.out.println("\u6210\u529f\u6dfb\u52a0\u4e86"+insertCount+"\u6761\u6570\u636e");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * BeanHandler:\u662fResultSetHandler\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u7528\u4e8e\u5c01\u88c5\u8868\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\n     */\n    @Test\n    public void query1() {\n        Connection conn=null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select id,username,balance from account where id=?";\n            BeanHandler<Account> handler = new BeanHandler<>(Account.class);\n            Account account = queryRunner.query(conn, sql, handler, 4);\n            System.out.println(account);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * BeanListHandler:\u662fResultSetHandler\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u7528\u4e8e\u5c01\u88c5\u8868\u4e2d\u7684\u591a\u6761\u8bb0\u5f55\u6784\u6210\u7684\u96c6\u5408\u3002\n     */\n    @Test\n    public void query2() {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select id,username,balance from account where id<?";\n            BeanListHandler<Account> handler = new BeanListHandler<>(Account.class);\n            List<Account> accounts = queryRunner.query(conn, sql, handler, 3);\n            accounts.forEach(System.out::println);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * MapHandler:\u662fResultSetHandler\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u5bf9\u5e94\u8868\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\n     * \u5c06\u5b57\u6bb5\u53ca\u76f8\u5e94\u5b57\u6bb5\u7684\u503c\u4f5c\u4e3amap\u4e2d\u7684key\u548cvalue\n     */\n    @Test\n    public void query3() {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select id,username,balance from account where id=?";\n            MapHandler handler = new MapHandler();\n            Map<String, Object> map = queryRunner.query(conn, sql, handler, 4);\n            System.out.println(map);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * MapListHandler:\u662fResultSetHandler\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u5bf9\u5e94\u8868\u4e2d\u7684\u591a\u6761\u8bb0\u5f55\uff0c\u5c01\u88c5\u4e3a\u96c6\u5408\n     * \u5c06\u5b57\u6bb5\u53ca\u76f8\u5e94\u5b57\u6bb5\u7684\u503c\u4f5c\u4e3amap\u4e2d\u7684key\u548cvalue\uff0c\u5c01\u88c5\u5230list\u96c6\u5408\u4e2d\n     */\n    @Test\n    public void query4() {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select id,username,balance from account where id<?";\n            MapListHandler handler = new MapListHandler();\n            List<Map<String, Object>> list = queryRunner.query(conn, sql, handler, 3);\n            list.forEach(System.out::println);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * ScalarHandler:\u7528\u4e8e\u67e5\u8be2\u7279\u6b8a\u503c\n     */\n    @Test\n    public void query5() {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select count(*) from account";\n            ScalarHandler handler = new ScalarHandler();\n            var count = queryRunner.query(conn, sql, handler);\n            System.out.println(count);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49ResultSetHandler\u7684\u5b9e\u73b0\u7c7b\n     */\n    @Test\n    public void query6() {\n        Connection conn = null;\n        try {\n            QueryRunner queryRunner=new QueryRunner();\n            conn = JdbcUtils.getConnection3();\n            String sql="select id,username,balance from account where id=?";\n\n            //\u533f\u540d\u7c7b\u5b9e\u73b0ResultSetHandler\uff0c\u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\n            ResultSetHandler<Account> handler = new ResultSetHandler<>() {\n                @Override\n                public Account handle(ResultSet resultSet) throws SQLException {\n                    if (resultSet.next()){\n                        int id=resultSet.getInt("id");\n                        String username=resultSet.getString("username");\n                        Double balance=resultSet.getDouble("balance");\n                        Account account = new Account(id, username, balance);\n                        return account;\n                    }\n                    return null;\n                }\n            };\n            Account account = queryRunner.query(conn, sql, handler, 4);\n            System.out.println(account);\n        } catch (SQLException throwables) {\n            throwables.printStackTrace();\n        } finally {\n            JdbcUtils.closeResource(conn,null);\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);